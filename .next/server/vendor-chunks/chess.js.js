"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/chess.js";
exports.ids = ["vendor-chunks/chess.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/chess.js/dist/cjs/chess.js":
/*!*************************************************!*\
  !*** ./node_modules/chess.js/dist/cjs/chess.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/**\r\n * @license\r\n * Copyright (c) 2025, Jeff Hlywa (jhlywa@gmail.com)\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Chess = exports.validateFen = exports.SEVEN_TAG_ROSTER = exports.SQUARES = exports.Move = exports.DEFAULT_POSITION = exports.KING = exports.QUEEN = exports.ROOK = exports.BISHOP = exports.KNIGHT = exports.PAWN = exports.BLACK = exports.WHITE = exports.xoroshiro128 = void 0;\r\nconst pgn_1 = __webpack_require__(/*! ./pgn */ \"(ssr)/./node_modules/chess.js/dist/cjs/pgn.js\");\r\nconst MASK64 = 0xffffffffffffffffn;\r\nfunction rotl(x, k) {\r\n    return ((x << k) | (x >> (64n - k))) & 0xffffffffffffffffn;\r\n}\r\nfunction wrappingMul(x, y) {\r\n    return (x * y) & MASK64;\r\n}\r\n// xoroshiro128**\r\nfunction xoroshiro128(state) {\r\n    return function () {\r\n        let s0 = BigInt(state & MASK64);\r\n        let s1 = BigInt((state >> 64n) & MASK64);\r\n        const result = wrappingMul(rotl(wrappingMul(s0, 5n), 7n), 9n);\r\n        s1 ^= s0;\r\n        s0 = (rotl(s0, 24n) ^ s1 ^ (s1 << 16n)) & MASK64;\r\n        s1 = rotl(s1, 37n);\r\n        state = (s1 << 64n) | s0;\r\n        return result;\r\n    };\r\n}\r\nexports.xoroshiro128 = xoroshiro128;\r\nconst rand = xoroshiro128(0xa187eb39cdcaed8f31c4b365b102e01en);\r\nconst PIECE_KEYS = Array.from({ length: 2 }, () => Array.from({ length: 6 }, () => Array.from({ length: 128 }, () => rand())));\r\nconst EP_KEYS = Array.from({ length: 8 }, () => rand());\r\nconst CASTLING_KEYS = Array.from({ length: 16 }, () => rand());\r\nconst SIDE_KEY = rand();\r\nexports.WHITE = 'w';\r\nexports.BLACK = 'b';\r\nexports.PAWN = 'p';\r\nexports.KNIGHT = 'n';\r\nexports.BISHOP = 'b';\r\nexports.ROOK = 'r';\r\nexports.QUEEN = 'q';\r\nexports.KING = 'k';\r\nexports.DEFAULT_POSITION = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\r\nclass Move {\r\n    color;\r\n    from;\r\n    to;\r\n    piece;\r\n    captured;\r\n    promotion;\r\n    /**\r\n     * @deprecated This field is deprecated and will be removed in version 2.0.0.\r\n     * Please use move descriptor functions instead: `isCapture`, `isPromotion`,\r\n     * `isEnPassant`, `isKingsideCastle`, `isQueensideCastle`, `isCastle`, and\r\n     * `isBigPawn`\r\n     */\r\n    flags;\r\n    san;\r\n    lan;\r\n    before;\r\n    after;\r\n    constructor(chess, internal) {\r\n        const { color, piece, from, to, flags, captured, promotion } = internal;\r\n        const fromAlgebraic = algebraic(from);\r\n        const toAlgebraic = algebraic(to);\r\n        this.color = color;\r\n        this.piece = piece;\r\n        this.from = fromAlgebraic;\r\n        this.to = toAlgebraic;\r\n        /*\r\n         * HACK: The chess['_method']() calls below invoke private methods in the\r\n         * Chess class to generate SAN and FEN. It's a bit of a hack, but makes the\r\n         * code cleaner elsewhere.\r\n         */\r\n        this.san = chess['_moveToSan'](internal, chess['_moves']({ legal: true }));\r\n        this.lan = fromAlgebraic + toAlgebraic;\r\n        this.before = chess.fen();\r\n        // Generate the FEN for the 'after' key\r\n        chess['_makeMove'](internal);\r\n        this.after = chess.fen();\r\n        chess['_undoMove']();\r\n        // Build the text representation of the move flags\r\n        this.flags = '';\r\n        for (const flag in BITS) {\r\n            if (BITS[flag] & flags) {\r\n                this.flags += FLAGS[flag];\r\n            }\r\n        }\r\n        if (captured) {\r\n            this.captured = captured;\r\n        }\r\n        if (promotion) {\r\n            this.promotion = promotion;\r\n            this.lan += promotion;\r\n        }\r\n    }\r\n    isCapture() {\r\n        return this.flags.indexOf(FLAGS['CAPTURE']) > -1;\r\n    }\r\n    isPromotion() {\r\n        return this.flags.indexOf(FLAGS['PROMOTION']) > -1;\r\n    }\r\n    isEnPassant() {\r\n        return this.flags.indexOf(FLAGS['EP_CAPTURE']) > -1;\r\n    }\r\n    isKingsideCastle() {\r\n        return this.flags.indexOf(FLAGS['KSIDE_CASTLE']) > -1;\r\n    }\r\n    isQueensideCastle() {\r\n        return this.flags.indexOf(FLAGS['QSIDE_CASTLE']) > -1;\r\n    }\r\n    isBigPawn() {\r\n        return this.flags.indexOf(FLAGS['BIG_PAWN']) > -1;\r\n    }\r\n}\r\nexports.Move = Move;\r\nconst EMPTY = -1;\r\nconst FLAGS = {\r\n    NORMAL: 'n',\r\n    CAPTURE: 'c',\r\n    BIG_PAWN: 'b',\r\n    EP_CAPTURE: 'e',\r\n    PROMOTION: 'p',\r\n    KSIDE_CASTLE: 'k',\r\n    QSIDE_CASTLE: 'q',\r\n};\r\n// prettier-ignore\r\nexports.SQUARES = [\r\n    'a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8',\r\n    'a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7',\r\n    'a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6',\r\n    'a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5',\r\n    'a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4',\r\n    'a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3',\r\n    'a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2',\r\n    'a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1'\r\n];\r\nconst BITS = {\r\n    NORMAL: 1,\r\n    CAPTURE: 2,\r\n    BIG_PAWN: 4,\r\n    EP_CAPTURE: 8,\r\n    PROMOTION: 16,\r\n    KSIDE_CASTLE: 32,\r\n    QSIDE_CASTLE: 64,\r\n};\r\n/* eslint-disable @typescript-eslint/naming-convention */\r\n// these are required, according to spec\r\nexports.SEVEN_TAG_ROSTER = {\r\n    Event: '?',\r\n    Site: '?',\r\n    Date: '????.??.??',\r\n    Round: '?',\r\n    White: '?',\r\n    Black: '?',\r\n    Result: '*',\r\n};\r\n/**\r\n * These nulls are placeholders to fix the order of tags (as they appear in PGN spec); null values will be\r\n * eliminated in getHeaders()\r\n */\r\nconst SUPLEMENTAL_TAGS = {\r\n    WhiteTitle: null,\r\n    BlackTitle: null,\r\n    WhiteElo: null,\r\n    BlackElo: null,\r\n    WhiteUSCF: null,\r\n    BlackUSCF: null,\r\n    WhiteNA: null,\r\n    BlackNA: null,\r\n    WhiteType: null,\r\n    BlackType: null,\r\n    EventDate: null,\r\n    EventSponsor: null,\r\n    Section: null,\r\n    Stage: null,\r\n    Board: null,\r\n    Opening: null,\r\n    Variation: null,\r\n    SubVariation: null,\r\n    ECO: null,\r\n    NIC: null,\r\n    Time: null,\r\n    UTCTime: null,\r\n    UTCDate: null,\r\n    TimeControl: null,\r\n    SetUp: null,\r\n    FEN: null,\r\n    Termination: null,\r\n    Annotator: null,\r\n    Mode: null,\r\n    PlyCount: null,\r\n};\r\nconst HEADER_TEMPLATE = {\r\n    ...exports.SEVEN_TAG_ROSTER,\r\n    ...SUPLEMENTAL_TAGS,\r\n};\r\n/* eslint-enable @typescript-eslint/naming-convention */\r\n/*\r\n * NOTES ABOUT 0x88 MOVE GENERATION ALGORITHM\r\n * ----------------------------------------------------------------------------\r\n * From https://github.com/jhlywa/chess.js/issues/230\r\n *\r\n * A lot of people are confused when they first see the internal representation\r\n * of chess.js. It uses the 0x88 Move Generation Algorithm which internally\r\n * stores the board as an 8x16 array. This is purely for efficiency but has a\r\n * couple of interesting benefits:\r\n *\r\n * 1. 0x88 offers a very inexpensive \"off the board\" check. Bitwise AND (&) any\r\n *    square with 0x88, if the result is non-zero then the square is off the\r\n *    board. For example, assuming a knight square A8 (0 in 0x88 notation),\r\n *    there are 8 possible directions in which the knight can move. These\r\n *    directions are relative to the 8x16 board and are stored in the\r\n *    PIECE_OFFSETS map. One possible move is A8 - 18 (up one square, and two\r\n *    squares to the left - which is off the board). 0 - 18 = -18 & 0x88 = 0x88\r\n *    (because of two-complement representation of -18). The non-zero result\r\n *    means the square is off the board and the move is illegal. Take the\r\n *    opposite move (from A8 to C7), 0 + 18 = 18 & 0x88 = 0. A result of zero\r\n *    means the square is on the board.\r\n *\r\n * 2. The relative distance (or difference) between two squares on a 8x16 board\r\n *    is unique and can be used to inexpensively determine if a piece on a\r\n *    square can attack any other arbitrary square. For example, let's see if a\r\n *    pawn on E7 can attack E2. The difference between E7 (20) - E2 (100) is\r\n *    -80. We add 119 to make the ATTACKS array index non-negative (because the\r\n *    worst case difference is A8 - H1 = -119). The ATTACKS array contains a\r\n *    bitmask of pieces that can attack from that distance and direction.\r\n *    ATTACKS[-80 + 119=39] gives us 24 or 0b11000 in binary. Look at the\r\n *    PIECE_MASKS map to determine the mask for a given piece type. In our pawn\r\n *    example, we would check to see if 24 & 0x1 is non-zero, which it is\r\n *    not. So, naturally, a pawn on E7 can't attack a piece on E2. However, a\r\n *    rook can since 24 & 0x8 is non-zero. The only thing left to check is that\r\n *    there are no blocking pieces between E7 and E2. That's where the RAYS\r\n *    array comes in. It provides an offset (in this case 16) to add to E7 (20)\r\n *    to check for blocking pieces. E7 (20) + 16 = E6 (36) + 16 = E5 (52) etc.\r\n */\r\n// prettier-ignore\r\n// eslint-disable-next-line\r\nconst Ox88 = {\r\n    a8: 0, b8: 1, c8: 2, d8: 3, e8: 4, f8: 5, g8: 6, h8: 7,\r\n    a7: 16, b7: 17, c7: 18, d7: 19, e7: 20, f7: 21, g7: 22, h7: 23,\r\n    a6: 32, b6: 33, c6: 34, d6: 35, e6: 36, f6: 37, g6: 38, h6: 39,\r\n    a5: 48, b5: 49, c5: 50, d5: 51, e5: 52, f5: 53, g5: 54, h5: 55,\r\n    a4: 64, b4: 65, c4: 66, d4: 67, e4: 68, f4: 69, g4: 70, h4: 71,\r\n    a3: 80, b3: 81, c3: 82, d3: 83, e3: 84, f3: 85, g3: 86, h3: 87,\r\n    a2: 96, b2: 97, c2: 98, d2: 99, e2: 100, f2: 101, g2: 102, h2: 103,\r\n    a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\r\n};\r\nconst PAWN_OFFSETS = {\r\n    b: [16, 32, 17, 15],\r\n    w: [-16, -32, -17, -15],\r\n};\r\nconst PIECE_OFFSETS = {\r\n    n: [-18, -33, -31, -14, 18, 33, 31, 14],\r\n    b: [-17, -15, 17, 15],\r\n    r: [-16, 1, 16, -1],\r\n    q: [-17, -16, -15, 1, 17, 16, 15, -1],\r\n    k: [-17, -16, -15, 1, 17, 16, 15, -1],\r\n};\r\n// prettier-ignore\r\nconst ATTACKS = [\r\n    20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20, 0,\r\n    0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0,\r\n    0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0,\r\n    0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0,\r\n    0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0,\r\n    0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0,\r\n    0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\r\n    24, 24, 24, 24, 24, 24, 56, 0, 56, 24, 24, 24, 24, 24, 24, 0,\r\n    0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\r\n    0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0,\r\n    0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0,\r\n    0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0,\r\n    0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0,\r\n    0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0,\r\n    20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20\r\n];\r\n// prettier-ignore\r\nconst RAYS = [\r\n    17, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 15, 0,\r\n    0, 17, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 15, 0, 0,\r\n    0, 0, 17, 0, 0, 0, 0, 16, 0, 0, 0, 0, 15, 0, 0, 0,\r\n    0, 0, 0, 17, 0, 0, 0, 16, 0, 0, 0, 15, 0, 0, 0, 0,\r\n    0, 0, 0, 0, 17, 0, 0, 16, 0, 0, 15, 0, 0, 0, 0, 0,\r\n    0, 0, 0, 0, 0, 17, 0, 16, 0, 15, 0, 0, 0, 0, 0, 0,\r\n    0, 0, 0, 0, 0, 0, 17, 16, 15, 0, 0, 0, 0, 0, 0, 0,\r\n    1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, 0,\r\n    0, 0, 0, 0, 0, 0, -15, -16, -17, 0, 0, 0, 0, 0, 0, 0,\r\n    0, 0, 0, 0, 0, -15, 0, -16, 0, -17, 0, 0, 0, 0, 0, 0,\r\n    0, 0, 0, 0, -15, 0, 0, -16, 0, 0, -17, 0, 0, 0, 0, 0,\r\n    0, 0, 0, -15, 0, 0, 0, -16, 0, 0, 0, -17, 0, 0, 0, 0,\r\n    0, 0, -15, 0, 0, 0, 0, -16, 0, 0, 0, 0, -17, 0, 0, 0,\r\n    0, -15, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, -17, 0, 0,\r\n    -15, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, -17\r\n];\r\nconst PIECE_MASKS = { p: 0x1, n: 0x2, b: 0x4, r: 0x8, q: 0x10, k: 0x20 };\r\nconst SYMBOLS = 'pnbrqkPNBRQK';\r\nconst PROMOTIONS = [exports.KNIGHT, exports.BISHOP, exports.ROOK, exports.QUEEN];\r\nconst RANK_1 = 7;\r\nconst RANK_2 = 6;\r\n/*\r\n * const RANK_3 = 5\r\n * const RANK_4 = 4\r\n * const RANK_5 = 3\r\n * const RANK_6 = 2\r\n */\r\nconst RANK_7 = 1;\r\nconst RANK_8 = 0;\r\nconst SIDES = {\r\n    [exports.KING]: BITS.KSIDE_CASTLE,\r\n    [exports.QUEEN]: BITS.QSIDE_CASTLE,\r\n};\r\nconst ROOKS = {\r\n    w: [\r\n        { square: Ox88.a1, flag: BITS.QSIDE_CASTLE },\r\n        { square: Ox88.h1, flag: BITS.KSIDE_CASTLE },\r\n    ],\r\n    b: [\r\n        { square: Ox88.a8, flag: BITS.QSIDE_CASTLE },\r\n        { square: Ox88.h8, flag: BITS.KSIDE_CASTLE },\r\n    ],\r\n};\r\nconst SECOND_RANK = { b: RANK_7, w: RANK_2 };\r\n// Extracts the zero-based rank of an 0x88 square.\r\nfunction rank(square) {\r\n    return square >> 4;\r\n}\r\n// Extracts the zero-based file of an 0x88 square.\r\nfunction file(square) {\r\n    return square & 0xf;\r\n}\r\nfunction isDigit(c) {\r\n    return '0123456789'.indexOf(c) !== -1;\r\n}\r\n// Converts a 0x88 square to algebraic notation.\r\nfunction algebraic(square) {\r\n    const f = file(square);\r\n    const r = rank(square);\r\n    return ('abcdefgh'.substring(f, f + 1) +\r\n        '87654321'.substring(r, r + 1));\r\n}\r\nfunction swapColor(color) {\r\n    return color === exports.WHITE ? exports.BLACK : exports.WHITE;\r\n}\r\nfunction validateFen(fen) {\r\n    // 1st criterion: 6 space-seperated fields?\r\n    const tokens = fen.split(/\\s+/);\r\n    if (tokens.length !== 6) {\r\n        return {\r\n            ok: false,\r\n            error: 'Invalid FEN: must contain six space-delimited fields',\r\n        };\r\n    }\r\n    // 2nd criterion: move number field is a integer value > 0?\r\n    const moveNumber = parseInt(tokens[5], 10);\r\n    if (isNaN(moveNumber) || moveNumber <= 0) {\r\n        return {\r\n            ok: false,\r\n            error: 'Invalid FEN: move number must be a positive integer',\r\n        };\r\n    }\r\n    // 3rd criterion: half move counter is an integer >= 0?\r\n    const halfMoves = parseInt(tokens[4], 10);\r\n    if (isNaN(halfMoves) || halfMoves < 0) {\r\n        return {\r\n            ok: false,\r\n            error: 'Invalid FEN: half move counter number must be a non-negative integer',\r\n        };\r\n    }\r\n    // 4th criterion: 4th field is a valid e.p.-string?\r\n    if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\r\n        return { ok: false, error: 'Invalid FEN: en-passant square is invalid' };\r\n    }\r\n    // 5th criterion: 3th field is a valid castle-string?\r\n    if (/[^kKqQ-]/.test(tokens[2])) {\r\n        return { ok: false, error: 'Invalid FEN: castling availability is invalid' };\r\n    }\r\n    // 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)?\r\n    if (!/^(w|b)$/.test(tokens[1])) {\r\n        return { ok: false, error: 'Invalid FEN: side-to-move is invalid' };\r\n    }\r\n    // 7th criterion: 1st field contains 8 rows?\r\n    const rows = tokens[0].split('/');\r\n    if (rows.length !== 8) {\r\n        return {\r\n            ok: false,\r\n            error: \"Invalid FEN: piece data does not contain 8 '/'-delimited rows\",\r\n        };\r\n    }\r\n    // 8th criterion: every row is valid?\r\n    for (let i = 0; i < rows.length; i++) {\r\n        // check for right sum of fields AND not two numbers in succession\r\n        let sumFields = 0;\r\n        let previousWasNumber = false;\r\n        for (let k = 0; k < rows[i].length; k++) {\r\n            if (isDigit(rows[i][k])) {\r\n                if (previousWasNumber) {\r\n                    return {\r\n                        ok: false,\r\n                        error: 'Invalid FEN: piece data is invalid (consecutive number)',\r\n                    };\r\n                }\r\n                sumFields += parseInt(rows[i][k], 10);\r\n                previousWasNumber = true;\r\n            }\r\n            else {\r\n                if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\r\n                    return {\r\n                        ok: false,\r\n                        error: 'Invalid FEN: piece data is invalid (invalid piece)',\r\n                    };\r\n                }\r\n                sumFields += 1;\r\n                previousWasNumber = false;\r\n            }\r\n        }\r\n        if (sumFields !== 8) {\r\n            return {\r\n                ok: false,\r\n                error: 'Invalid FEN: piece data is invalid (too many squares in rank)',\r\n            };\r\n        }\r\n    }\r\n    // 9th criterion: is en-passant square legal?\r\n    if ((tokens[3][1] == '3' && tokens[1] == 'w') ||\r\n        (tokens[3][1] == '6' && tokens[1] == 'b')) {\r\n        return { ok: false, error: 'Invalid FEN: illegal en-passant square' };\r\n    }\r\n    // 10th criterion: does chess position contain exact two kings?\r\n    const kings = [\r\n        { color: 'white', regex: /K/g },\r\n        { color: 'black', regex: /k/g },\r\n    ];\r\n    for (const { color, regex } of kings) {\r\n        if (!regex.test(tokens[0])) {\r\n            return { ok: false, error: `Invalid FEN: missing ${color} king` };\r\n        }\r\n        if ((tokens[0].match(regex) || []).length > 1) {\r\n            return { ok: false, error: `Invalid FEN: too many ${color} kings` };\r\n        }\r\n    }\r\n    // 11th criterion: are any pawns on the first or eighth rows?\r\n    if (Array.from(rows[0] + rows[7]).some((char) => char.toUpperCase() === 'P')) {\r\n        return {\r\n            ok: false,\r\n            error: 'Invalid FEN: some pawns are on the edge rows',\r\n        };\r\n    }\r\n    return { ok: true };\r\n}\r\nexports.validateFen = validateFen;\r\n// this function is used to uniquely identify ambiguous moves\r\nfunction getDisambiguator(move, moves) {\r\n    const from = move.from;\r\n    const to = move.to;\r\n    const piece = move.piece;\r\n    let ambiguities = 0;\r\n    let sameRank = 0;\r\n    let sameFile = 0;\r\n    for (let i = 0, len = moves.length; i < len; i++) {\r\n        const ambigFrom = moves[i].from;\r\n        const ambigTo = moves[i].to;\r\n        const ambigPiece = moves[i].piece;\r\n        /*\r\n         * if a move of the same piece type ends on the same to square, we'll need\r\n         * to add a disambiguator to the algebraic notation\r\n         */\r\n        if (piece === ambigPiece && from !== ambigFrom && to === ambigTo) {\r\n            ambiguities++;\r\n            if (rank(from) === rank(ambigFrom)) {\r\n                sameRank++;\r\n            }\r\n            if (file(from) === file(ambigFrom)) {\r\n                sameFile++;\r\n            }\r\n        }\r\n    }\r\n    if (ambiguities > 0) {\r\n        if (sameRank > 0 && sameFile > 0) {\r\n            /*\r\n             * if there exists a similar moving piece on the same rank and file as\r\n             * the move in question, use the square as the disambiguator\r\n             */\r\n            return algebraic(from);\r\n        }\r\n        else if (sameFile > 0) {\r\n            /*\r\n             * if the moving piece rests on the same file, use the rank symbol as the\r\n             * disambiguator\r\n             */\r\n            return algebraic(from).charAt(1);\r\n        }\r\n        else {\r\n            // else use the file symbol\r\n            return algebraic(from).charAt(0);\r\n        }\r\n    }\r\n    return '';\r\n}\r\nfunction addMove(moves, color, from, to, piece, captured = undefined, flags = BITS.NORMAL) {\r\n    const r = rank(to);\r\n    if (piece === exports.PAWN && (r === RANK_1 || r === RANK_8)) {\r\n        for (let i = 0; i < PROMOTIONS.length; i++) {\r\n            const promotion = PROMOTIONS[i];\r\n            moves.push({\r\n                color,\r\n                from,\r\n                to,\r\n                piece,\r\n                captured,\r\n                promotion,\r\n                flags: flags | BITS.PROMOTION,\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        moves.push({\r\n            color,\r\n            from,\r\n            to,\r\n            piece,\r\n            captured,\r\n            flags,\r\n        });\r\n    }\r\n}\r\nfunction inferPieceType(san) {\r\n    let pieceType = san.charAt(0);\r\n    if (pieceType >= 'a' && pieceType <= 'h') {\r\n        const matches = san.match(/[a-h]\\d.*[a-h]\\d/);\r\n        if (matches) {\r\n            return undefined;\r\n        }\r\n        return exports.PAWN;\r\n    }\r\n    pieceType = pieceType.toLowerCase();\r\n    if (pieceType === 'o') {\r\n        return exports.KING;\r\n    }\r\n    return pieceType;\r\n}\r\n// parses all of the decorators out of a SAN string\r\nfunction strippedSan(move) {\r\n    return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '');\r\n}\r\nclass Chess {\r\n    _board = new Array(128);\r\n    _turn = exports.WHITE;\r\n    _header = {};\r\n    _kings = { w: EMPTY, b: EMPTY };\r\n    _epSquare = -1;\r\n    _halfMoves = 0;\r\n    _moveNumber = 0;\r\n    _history = [];\r\n    _comments = {};\r\n    _castling = { w: 0, b: 0 };\r\n    _hash = 0n;\r\n    // tracks number of times a position has been seen for repetition checking\r\n    _positionCount = new Map();\r\n    constructor(fen = exports.DEFAULT_POSITION, { skipValidation = false } = {}) {\r\n        this.load(fen, { skipValidation });\r\n    }\r\n    clear({ preserveHeaders = false } = {}) {\r\n        this._board = new Array(128);\r\n        this._kings = { w: EMPTY, b: EMPTY };\r\n        this._turn = exports.WHITE;\r\n        this._castling = { w: 0, b: 0 };\r\n        this._epSquare = EMPTY;\r\n        this._halfMoves = 0;\r\n        this._moveNumber = 1;\r\n        this._history = [];\r\n        this._comments = {};\r\n        this._header = preserveHeaders ? this._header : { ...HEADER_TEMPLATE };\r\n        this._hash = this._computeHash();\r\n        this._positionCount = new Map();\r\n        /*\r\n         * Delete the SetUp and FEN headers (if preserved), the board is empty and\r\n         * these headers don't make sense in this state. They'll get added later\r\n         * via .load() or .put()\r\n         */\r\n        this._header['SetUp'] = null;\r\n        this._header['FEN'] = null;\r\n    }\r\n    load(fen, { skipValidation = false, preserveHeaders = false } = {}) {\r\n        let tokens = fen.split(/\\s+/);\r\n        // append commonly omitted fen tokens\r\n        if (tokens.length >= 2 && tokens.length < 6) {\r\n            const adjustments = ['-', '-', '0', '1'];\r\n            fen = tokens.concat(adjustments.slice(-(6 - tokens.length))).join(' ');\r\n        }\r\n        tokens = fen.split(/\\s+/);\r\n        if (!skipValidation) {\r\n            const { ok, error } = validateFen(fen);\r\n            if (!ok) {\r\n                throw new Error(error);\r\n            }\r\n        }\r\n        const position = tokens[0];\r\n        let square = 0;\r\n        this.clear({ preserveHeaders });\r\n        for (let i = 0; i < position.length; i++) {\r\n            const piece = position.charAt(i);\r\n            if (piece === '/') {\r\n                square += 8;\r\n            }\r\n            else if (isDigit(piece)) {\r\n                square += parseInt(piece, 10);\r\n            }\r\n            else {\r\n                const color = piece < 'a' ? exports.WHITE : exports.BLACK;\r\n                this._put({ type: piece.toLowerCase(), color }, algebraic(square));\r\n                square++;\r\n            }\r\n        }\r\n        this._turn = tokens[1];\r\n        if (tokens[2].indexOf('K') > -1) {\r\n            this._castling.w |= BITS.KSIDE_CASTLE;\r\n        }\r\n        if (tokens[2].indexOf('Q') > -1) {\r\n            this._castling.w |= BITS.QSIDE_CASTLE;\r\n        }\r\n        if (tokens[2].indexOf('k') > -1) {\r\n            this._castling.b |= BITS.KSIDE_CASTLE;\r\n        }\r\n        if (tokens[2].indexOf('q') > -1) {\r\n            this._castling.b |= BITS.QSIDE_CASTLE;\r\n        }\r\n        this._epSquare = tokens[3] === '-' ? EMPTY : Ox88[tokens[3]];\r\n        this._halfMoves = parseInt(tokens[4], 10);\r\n        this._moveNumber = parseInt(tokens[5], 10);\r\n        this._hash = this._computeHash();\r\n        this._updateSetup(fen);\r\n        this._incPositionCount();\r\n    }\r\n    fen({ forceEnpassantSquare = false, } = {}) {\r\n        let empty = 0;\r\n        let fen = '';\r\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\r\n            if (this._board[i]) {\r\n                if (empty > 0) {\r\n                    fen += empty;\r\n                    empty = 0;\r\n                }\r\n                const { color, type: piece } = this._board[i];\r\n                fen += color === exports.WHITE ? piece.toUpperCase() : piece.toLowerCase();\r\n            }\r\n            else {\r\n                empty++;\r\n            }\r\n            if ((i + 1) & 0x88) {\r\n                if (empty > 0) {\r\n                    fen += empty;\r\n                }\r\n                if (i !== Ox88.h1) {\r\n                    fen += '/';\r\n                }\r\n                empty = 0;\r\n                i += 8;\r\n            }\r\n        }\r\n        let castling = '';\r\n        if (this._castling[exports.WHITE] & BITS.KSIDE_CASTLE) {\r\n            castling += 'K';\r\n        }\r\n        if (this._castling[exports.WHITE] & BITS.QSIDE_CASTLE) {\r\n            castling += 'Q';\r\n        }\r\n        if (this._castling[exports.BLACK] & BITS.KSIDE_CASTLE) {\r\n            castling += 'k';\r\n        }\r\n        if (this._castling[exports.BLACK] & BITS.QSIDE_CASTLE) {\r\n            castling += 'q';\r\n        }\r\n        // do we have an empty castling flag?\r\n        castling = castling || '-';\r\n        let epSquare = '-';\r\n        /*\r\n         * only print the ep square if en passant is a valid move (pawn is present\r\n         * and ep capture is not pinned)\r\n         */\r\n        if (this._epSquare !== EMPTY) {\r\n            if (forceEnpassantSquare) {\r\n                epSquare = algebraic(this._epSquare);\r\n            }\r\n            else {\r\n                const bigPawnSquare = this._epSquare + (this._turn === exports.WHITE ? 16 : -16);\r\n                const squares = [bigPawnSquare + 1, bigPawnSquare - 1];\r\n                for (const square of squares) {\r\n                    // is the square off the board?\r\n                    if (square & 0x88) {\r\n                        continue;\r\n                    }\r\n                    const color = this._turn;\r\n                    // is there a pawn that can capture the epSquare?\r\n                    if (this._board[square]?.color === color &&\r\n                        this._board[square]?.type === exports.PAWN) {\r\n                        // if the pawn makes an ep capture, does it leave its king in check?\r\n                        this._makeMove({\r\n                            color,\r\n                            from: square,\r\n                            to: this._epSquare,\r\n                            piece: exports.PAWN,\r\n                            captured: exports.PAWN,\r\n                            flags: BITS.EP_CAPTURE,\r\n                        });\r\n                        const isLegal = !this._isKingAttacked(color);\r\n                        this._undoMove();\r\n                        // if ep is legal, break and set the ep square in the FEN output\r\n                        if (isLegal) {\r\n                            epSquare = algebraic(this._epSquare);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return [\r\n            fen,\r\n            this._turn,\r\n            castling,\r\n            epSquare,\r\n            this._halfMoves,\r\n            this._moveNumber,\r\n        ].join(' ');\r\n    }\r\n    _pieceKey(i) {\r\n        if (!this._board[i]) {\r\n            return 0n;\r\n        }\r\n        const { color, type } = this._board[i];\r\n        const colorIndex = {\r\n            w: 0,\r\n            b: 1,\r\n        }[color];\r\n        const typeIndex = {\r\n            p: 0,\r\n            n: 1,\r\n            b: 2,\r\n            r: 3,\r\n            q: 4,\r\n            k: 5,\r\n        }[type];\r\n        return PIECE_KEYS[colorIndex][typeIndex][i];\r\n    }\r\n    _epKey() {\r\n        return this._epSquare === EMPTY ? 0n : EP_KEYS[this._epSquare & 7];\r\n    }\r\n    _castlingKey() {\r\n        const index = (this._castling.w >> 5) | (this._castling.b >> 3);\r\n        return CASTLING_KEYS[index];\r\n    }\r\n    _computeHash() {\r\n        let hash = 0n;\r\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\r\n            // did we run off the end of the board\r\n            if (i & 0x88) {\r\n                i += 7;\r\n                continue;\r\n            }\r\n            if (this._board[i]) {\r\n                hash ^= this._pieceKey(i);\r\n            }\r\n        }\r\n        hash ^= this._epKey();\r\n        hash ^= this._castlingKey();\r\n        if (this._turn === 'b') {\r\n            hash ^= SIDE_KEY;\r\n        }\r\n        return hash;\r\n    }\r\n    /*\r\n     * Called when the initial board setup is changed with put() or remove().\r\n     * modifies the SetUp and FEN properties of the header object. If the FEN\r\n     * is equal to the default position, the SetUp and FEN are deleted the setup\r\n     * is only updated if history.length is zero, ie moves haven't been made.\r\n     */\r\n    _updateSetup(fen) {\r\n        if (this._history.length > 0)\r\n            return;\r\n        if (fen !== exports.DEFAULT_POSITION) {\r\n            this._header['SetUp'] = '1';\r\n            this._header['FEN'] = fen;\r\n        }\r\n        else {\r\n            this._header['SetUp'] = null;\r\n            this._header['FEN'] = null;\r\n        }\r\n    }\r\n    reset() {\r\n        this.load(exports.DEFAULT_POSITION);\r\n    }\r\n    get(square) {\r\n        return this._board[Ox88[square]];\r\n    }\r\n    findPiece(piece) {\r\n        const squares = [];\r\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\r\n            // did we run off the end of the board\r\n            if (i & 0x88) {\r\n                i += 7;\r\n                continue;\r\n            }\r\n            // if empty square or wrong color\r\n            if (!this._board[i] || this._board[i]?.color !== piece.color) {\r\n                continue;\r\n            }\r\n            // check if square contains the requested piece\r\n            if (this._board[i].color === piece.color &&\r\n                this._board[i].type === piece.type) {\r\n                squares.push(algebraic(i));\r\n            }\r\n        }\r\n        return squares;\r\n    }\r\n    put({ type, color }, square) {\r\n        if (this._put({ type, color }, square)) {\r\n            this._updateCastlingRights();\r\n            this._updateEnPassantSquare();\r\n            this._updateSetup(this.fen());\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    _set(sq, piece) {\r\n        this._hash ^= this._pieceKey(sq);\r\n        this._board[sq] = piece;\r\n        this._hash ^= this._pieceKey(sq);\r\n    }\r\n    _put({ type, color }, square) {\r\n        // check for piece\r\n        if (SYMBOLS.indexOf(type.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        // check for valid square\r\n        if (!(square in Ox88)) {\r\n            return false;\r\n        }\r\n        const sq = Ox88[square];\r\n        // don't let the user place more than one king\r\n        if (type == exports.KING &&\r\n            !(this._kings[color] == EMPTY || this._kings[color] == sq)) {\r\n            return false;\r\n        }\r\n        const currentPieceOnSquare = this._board[sq];\r\n        // if one of the kings will be replaced by the piece from args, set the `_kings` respective entry to `EMPTY`\r\n        if (currentPieceOnSquare && currentPieceOnSquare.type === exports.KING) {\r\n            this._kings[currentPieceOnSquare.color] = EMPTY;\r\n        }\r\n        this._set(sq, { type: type, color: color });\r\n        if (type === exports.KING) {\r\n            this._kings[color] = sq;\r\n        }\r\n        return true;\r\n    }\r\n    _clear(sq) {\r\n        this._hash ^= this._pieceKey(sq);\r\n        delete this._board[sq];\r\n    }\r\n    remove(square) {\r\n        const piece = this.get(square);\r\n        this._clear(Ox88[square]);\r\n        if (piece && piece.type === exports.KING) {\r\n            this._kings[piece.color] = EMPTY;\r\n        }\r\n        this._updateCastlingRights();\r\n        this._updateEnPassantSquare();\r\n        this._updateSetup(this.fen());\r\n        return piece;\r\n    }\r\n    _updateCastlingRights() {\r\n        this._hash ^= this._castlingKey();\r\n        const whiteKingInPlace = this._board[Ox88.e1]?.type === exports.KING &&\r\n            this._board[Ox88.e1]?.color === exports.WHITE;\r\n        const blackKingInPlace = this._board[Ox88.e8]?.type === exports.KING &&\r\n            this._board[Ox88.e8]?.color === exports.BLACK;\r\n        if (!whiteKingInPlace ||\r\n            this._board[Ox88.a1]?.type !== exports.ROOK ||\r\n            this._board[Ox88.a1]?.color !== exports.WHITE) {\r\n            this._castling.w &= ~BITS.QSIDE_CASTLE;\r\n        }\r\n        if (!whiteKingInPlace ||\r\n            this._board[Ox88.h1]?.type !== exports.ROOK ||\r\n            this._board[Ox88.h1]?.color !== exports.WHITE) {\r\n            this._castling.w &= ~BITS.KSIDE_CASTLE;\r\n        }\r\n        if (!blackKingInPlace ||\r\n            this._board[Ox88.a8]?.type !== exports.ROOK ||\r\n            this._board[Ox88.a8]?.color !== exports.BLACK) {\r\n            this._castling.b &= ~BITS.QSIDE_CASTLE;\r\n        }\r\n        if (!blackKingInPlace ||\r\n            this._board[Ox88.h8]?.type !== exports.ROOK ||\r\n            this._board[Ox88.h8]?.color !== exports.BLACK) {\r\n            this._castling.b &= ~BITS.KSIDE_CASTLE;\r\n        }\r\n        this._hash ^= this._castlingKey();\r\n    }\r\n    _updateEnPassantSquare() {\r\n        if (this._epSquare === EMPTY) {\r\n            return;\r\n        }\r\n        const startSquare = this._epSquare + (this._turn === exports.WHITE ? -16 : 16);\r\n        const currentSquare = this._epSquare + (this._turn === exports.WHITE ? 16 : -16);\r\n        const attackers = [currentSquare + 1, currentSquare - 1];\r\n        if (this._board[startSquare] !== null ||\r\n            this._board[this._epSquare] !== null ||\r\n            this._board[currentSquare]?.color !== swapColor(this._turn) ||\r\n            this._board[currentSquare]?.type !== exports.PAWN) {\r\n            this._hash ^= this._epKey();\r\n            this._epSquare = EMPTY;\r\n            return;\r\n        }\r\n        const canCapture = (square) => !(square & 0x88) &&\r\n            this._board[square]?.color === this._turn &&\r\n            this._board[square]?.type === exports.PAWN;\r\n        if (!attackers.some(canCapture)) {\r\n            this._hash ^= this._epKey();\r\n            this._epSquare = EMPTY;\r\n        }\r\n    }\r\n    _attacked(color, square, verbose) {\r\n        const attackers = [];\r\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\r\n            // did we run off the end of the board\r\n            if (i & 0x88) {\r\n                i += 7;\r\n                continue;\r\n            }\r\n            // if empty square or wrong color\r\n            if (this._board[i] === undefined || this._board[i].color !== color) {\r\n                continue;\r\n            }\r\n            const piece = this._board[i];\r\n            const difference = i - square;\r\n            // skip - to/from square are the same\r\n            if (difference === 0) {\r\n                continue;\r\n            }\r\n            const index = difference + 119;\r\n            if (ATTACKS[index] & PIECE_MASKS[piece.type]) {\r\n                if (piece.type === exports.PAWN) {\r\n                    if ((difference > 0 && piece.color === exports.WHITE) ||\r\n                        (difference <= 0 && piece.color === exports.BLACK)) {\r\n                        if (!verbose) {\r\n                            return true;\r\n                        }\r\n                        else {\r\n                            attackers.push(algebraic(i));\r\n                        }\r\n                    }\r\n                    continue;\r\n                }\r\n                // if the piece is a knight or a king\r\n                if (piece.type === 'n' || piece.type === 'k') {\r\n                    if (!verbose) {\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        attackers.push(algebraic(i));\r\n                        continue;\r\n                    }\r\n                }\r\n                const offset = RAYS[index];\r\n                let j = i + offset;\r\n                let blocked = false;\r\n                while (j !== square) {\r\n                    if (this._board[j] != null) {\r\n                        blocked = true;\r\n                        break;\r\n                    }\r\n                    j += offset;\r\n                }\r\n                if (!blocked) {\r\n                    if (!verbose) {\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        attackers.push(algebraic(i));\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (verbose) {\r\n            return attackers;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    attackers(square, attackedBy) {\r\n        if (!attackedBy) {\r\n            return this._attacked(this._turn, Ox88[square], true);\r\n        }\r\n        else {\r\n            return this._attacked(attackedBy, Ox88[square], true);\r\n        }\r\n    }\r\n    _isKingAttacked(color) {\r\n        const square = this._kings[color];\r\n        return square === -1 ? false : this._attacked(swapColor(color), square);\r\n    }\r\n    hash() {\r\n        return this._hash.toString(16);\r\n    }\r\n    isAttacked(square, attackedBy) {\r\n        return this._attacked(attackedBy, Ox88[square]);\r\n    }\r\n    isCheck() {\r\n        return this._isKingAttacked(this._turn);\r\n    }\r\n    inCheck() {\r\n        return this.isCheck();\r\n    }\r\n    isCheckmate() {\r\n        return this.isCheck() && this._moves().length === 0;\r\n    }\r\n    isStalemate() {\r\n        return !this.isCheck() && this._moves().length === 0;\r\n    }\r\n    isInsufficientMaterial() {\r\n        /*\r\n         * k.b. vs k.b. (of opposite colors) with mate in 1:\r\n         * 8/8/8/8/1b6/8/B1k5/K7 b - - 0 1\r\n         *\r\n         * k.b. vs k.n. with mate in 1:\r\n         * 8/8/8/8/1n6/8/B7/K1k5 b - - 2 1\r\n         */\r\n        const pieces = {\r\n            b: 0,\r\n            n: 0,\r\n            r: 0,\r\n            q: 0,\r\n            k: 0,\r\n            p: 0,\r\n        };\r\n        const bishops = [];\r\n        let numPieces = 0;\r\n        let squareColor = 0;\r\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\r\n            squareColor = (squareColor + 1) % 2;\r\n            if (i & 0x88) {\r\n                i += 7;\r\n                continue;\r\n            }\r\n            const piece = this._board[i];\r\n            if (piece) {\r\n                pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1;\r\n                if (piece.type === exports.BISHOP) {\r\n                    bishops.push(squareColor);\r\n                }\r\n                numPieces++;\r\n            }\r\n        }\r\n        // k vs. k\r\n        if (numPieces === 2) {\r\n            return true;\r\n        }\r\n        else if (\r\n        // k vs. kn .... or .... k vs. kb\r\n        numPieces === 3 &&\r\n            (pieces[exports.BISHOP] === 1 || pieces[exports.KNIGHT] === 1)) {\r\n            return true;\r\n        }\r\n        else if (numPieces === pieces[exports.BISHOP] + 2) {\r\n            // kb vs. kb where any number of bishops are all on the same color\r\n            let sum = 0;\r\n            const len = bishops.length;\r\n            for (let i = 0; i < len; i++) {\r\n                sum += bishops[i];\r\n            }\r\n            if (sum === 0 || sum === len) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    isThreefoldRepetition() {\r\n        return this._getPositionCount(this._hash) >= 3;\r\n    }\r\n    isDrawByFiftyMoves() {\r\n        return this._halfMoves >= 100; // 50 moves per side = 100 half moves\r\n    }\r\n    isDraw() {\r\n        return (this.isDrawByFiftyMoves() ||\r\n            this.isStalemate() ||\r\n            this.isInsufficientMaterial() ||\r\n            this.isThreefoldRepetition());\r\n    }\r\n    isGameOver() {\r\n        return this.isCheckmate() || this.isDraw();\r\n    }\r\n    moves({ verbose = false, square = undefined, piece = undefined, } = {}) {\r\n        const moves = this._moves({ square, piece });\r\n        if (verbose) {\r\n            return moves.map((move) => new Move(this, move));\r\n        }\r\n        else {\r\n            return moves.map((move) => this._moveToSan(move, moves));\r\n        }\r\n    }\r\n    _moves({ legal = true, piece = undefined, square = undefined, } = {}) {\r\n        const forSquare = square ? square.toLowerCase() : undefined;\r\n        const forPiece = piece?.toLowerCase();\r\n        const moves = [];\r\n        const us = this._turn;\r\n        const them = swapColor(us);\r\n        let firstSquare = Ox88.a8;\r\n        let lastSquare = Ox88.h1;\r\n        let singleSquare = false;\r\n        // are we generating moves for a single square?\r\n        if (forSquare) {\r\n            // illegal square, return empty moves\r\n            if (!(forSquare in Ox88)) {\r\n                return [];\r\n            }\r\n            else {\r\n                firstSquare = lastSquare = Ox88[forSquare];\r\n                singleSquare = true;\r\n            }\r\n        }\r\n        for (let from = firstSquare; from <= lastSquare; from++) {\r\n            // did we run off the end of the board\r\n            if (from & 0x88) {\r\n                from += 7;\r\n                continue;\r\n            }\r\n            // empty square or opponent, skip\r\n            if (!this._board[from] || this._board[from].color === them) {\r\n                continue;\r\n            }\r\n            const { type } = this._board[from];\r\n            let to;\r\n            if (type === exports.PAWN) {\r\n                if (forPiece && forPiece !== type)\r\n                    continue;\r\n                // single square, non-capturing\r\n                to = from + PAWN_OFFSETS[us][0];\r\n                if (!this._board[to]) {\r\n                    addMove(moves, us, from, to, exports.PAWN);\r\n                    // double square\r\n                    to = from + PAWN_OFFSETS[us][1];\r\n                    if (SECOND_RANK[us] === rank(from) && !this._board[to]) {\r\n                        addMove(moves, us, from, to, exports.PAWN, undefined, BITS.BIG_PAWN);\r\n                    }\r\n                }\r\n                // pawn captures\r\n                for (let j = 2; j < 4; j++) {\r\n                    to = from + PAWN_OFFSETS[us][j];\r\n                    if (to & 0x88)\r\n                        continue;\r\n                    if (this._board[to]?.color === them) {\r\n                        addMove(moves, us, from, to, exports.PAWN, this._board[to].type, BITS.CAPTURE);\r\n                    }\r\n                    else if (to === this._epSquare) {\r\n                        addMove(moves, us, from, to, exports.PAWN, exports.PAWN, BITS.EP_CAPTURE);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (forPiece && forPiece !== type)\r\n                    continue;\r\n                for (let j = 0, len = PIECE_OFFSETS[type].length; j < len; j++) {\r\n                    const offset = PIECE_OFFSETS[type][j];\r\n                    to = from;\r\n                    while (true) {\r\n                        to += offset;\r\n                        if (to & 0x88)\r\n                            break;\r\n                        if (!this._board[to]) {\r\n                            addMove(moves, us, from, to, type);\r\n                        }\r\n                        else {\r\n                            // own color, stop loop\r\n                            if (this._board[to].color === us)\r\n                                break;\r\n                            addMove(moves, us, from, to, type, this._board[to].type, BITS.CAPTURE);\r\n                            break;\r\n                        }\r\n                        /* break, if knight or king */\r\n                        if (type === exports.KNIGHT || type === exports.KING)\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        /*\r\n         * check for castling if we're:\r\n         *   a) generating all moves, or\r\n         *   b) doing single square move generation on the king's square\r\n         */\r\n        if (forPiece === undefined || forPiece === exports.KING) {\r\n            if (!singleSquare || lastSquare === this._kings[us]) {\r\n                // king-side castling\r\n                if (this._castling[us] & BITS.KSIDE_CASTLE) {\r\n                    const castlingFrom = this._kings[us];\r\n                    const castlingTo = castlingFrom + 2;\r\n                    if (!this._board[castlingFrom + 1] &&\r\n                        !this._board[castlingTo] &&\r\n                        !this._attacked(them, this._kings[us]) &&\r\n                        !this._attacked(them, castlingFrom + 1) &&\r\n                        !this._attacked(them, castlingTo)) {\r\n                        addMove(moves, us, this._kings[us], castlingTo, exports.KING, undefined, BITS.KSIDE_CASTLE);\r\n                    }\r\n                }\r\n                // queen-side castling\r\n                if (this._castling[us] & BITS.QSIDE_CASTLE) {\r\n                    const castlingFrom = this._kings[us];\r\n                    const castlingTo = castlingFrom - 2;\r\n                    if (!this._board[castlingFrom - 1] &&\r\n                        !this._board[castlingFrom - 2] &&\r\n                        !this._board[castlingFrom - 3] &&\r\n                        !this._attacked(them, this._kings[us]) &&\r\n                        !this._attacked(them, castlingFrom - 1) &&\r\n                        !this._attacked(them, castlingTo)) {\r\n                        addMove(moves, us, this._kings[us], castlingTo, exports.KING, undefined, BITS.QSIDE_CASTLE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        /*\r\n         * return all pseudo-legal moves (this includes moves that allow the king\r\n         * to be captured)\r\n         */\r\n        if (!legal || this._kings[us] === -1) {\r\n            return moves;\r\n        }\r\n        // filter out illegal moves\r\n        const legalMoves = [];\r\n        for (let i = 0, len = moves.length; i < len; i++) {\r\n            this._makeMove(moves[i]);\r\n            if (!this._isKingAttacked(us)) {\r\n                legalMoves.push(moves[i]);\r\n            }\r\n            this._undoMove();\r\n        }\r\n        return legalMoves;\r\n    }\r\n    move(move, { strict = false } = {}) {\r\n        /*\r\n         * The move function can be called with in the following parameters:\r\n         *\r\n         * .move('Nxb7')       <- argument is a case-sensitive SAN string\r\n         *\r\n         * .move({ from: 'h7', <- argument is a move object\r\n         *         to :'h8',\r\n         *         promotion: 'q' })\r\n         *\r\n         *\r\n         * An optional strict argument may be supplied to tell chess.js to\r\n         * strictly follow the SAN specification.\r\n         */\r\n        let moveObj = null;\r\n        if (typeof move === 'string') {\r\n            moveObj = this._moveFromSan(move, strict);\r\n        }\r\n        else if (typeof move === 'object') {\r\n            const moves = this._moves();\r\n            // convert the pretty move object to an ugly move object\r\n            for (let i = 0, len = moves.length; i < len; i++) {\r\n                if (move.from === algebraic(moves[i].from) &&\r\n                    move.to === algebraic(moves[i].to) &&\r\n                    (!('promotion' in moves[i]) || move.promotion === moves[i].promotion)) {\r\n                    moveObj = moves[i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // failed to find move\r\n        if (!moveObj) {\r\n            if (typeof move === 'string') {\r\n                throw new Error(`Invalid move: ${move}`);\r\n            }\r\n            else {\r\n                throw new Error(`Invalid move: ${JSON.stringify(move)}`);\r\n            }\r\n        }\r\n        /*\r\n         * need to make a copy of move because we can't generate SAN after the move\r\n         * is made\r\n         */\r\n        const prettyMove = new Move(this, moveObj);\r\n        this._makeMove(moveObj);\r\n        this._incPositionCount();\r\n        return prettyMove;\r\n    }\r\n    _push(move) {\r\n        this._history.push({\r\n            move,\r\n            kings: { b: this._kings.b, w: this._kings.w },\r\n            turn: this._turn,\r\n            castling: { b: this._castling.b, w: this._castling.w },\r\n            epSquare: this._epSquare,\r\n            halfMoves: this._halfMoves,\r\n            moveNumber: this._moveNumber,\r\n        });\r\n    }\r\n    _movePiece(from, to) {\r\n        this._hash ^= this._pieceKey(from);\r\n        this._board[to] = this._board[from];\r\n        delete this._board[from];\r\n        this._hash ^= this._pieceKey(to);\r\n    }\r\n    _makeMove(move) {\r\n        const us = this._turn;\r\n        const them = swapColor(us);\r\n        this._push(move);\r\n        this._hash ^= this._epKey();\r\n        this._hash ^= this._castlingKey();\r\n        if (move.captured) {\r\n            this._hash ^= this._pieceKey(move.to);\r\n        }\r\n        this._movePiece(move.from, move.to);\r\n        // if ep capture, remove the captured pawn\r\n        if (move.flags & BITS.EP_CAPTURE) {\r\n            if (this._turn === exports.BLACK) {\r\n                this._clear(move.to - 16);\r\n            }\r\n            else {\r\n                this._clear(move.to + 16);\r\n            }\r\n        }\r\n        // if pawn promotion, replace with new piece\r\n        if (move.promotion) {\r\n            this._clear(move.to);\r\n            this._set(move.to, { type: move.promotion, color: us });\r\n        }\r\n        // if we moved the king\r\n        if (this._board[move.to].type === exports.KING) {\r\n            this._kings[us] = move.to;\r\n            // if we castled, move the rook next to the king\r\n            if (move.flags & BITS.KSIDE_CASTLE) {\r\n                const castlingTo = move.to - 1;\r\n                const castlingFrom = move.to + 1;\r\n                this._movePiece(castlingFrom, castlingTo);\r\n            }\r\n            else if (move.flags & BITS.QSIDE_CASTLE) {\r\n                const castlingTo = move.to + 1;\r\n                const castlingFrom = move.to - 2;\r\n                this._movePiece(castlingFrom, castlingTo);\r\n            }\r\n            // turn off castling\r\n            this._castling[us] = 0;\r\n        }\r\n        // turn off castling if we move a rook\r\n        if (this._castling[us]) {\r\n            for (let i = 0, len = ROOKS[us].length; i < len; i++) {\r\n                if (move.from === ROOKS[us][i].square &&\r\n                    this._castling[us] & ROOKS[us][i].flag) {\r\n                    this._castling[us] ^= ROOKS[us][i].flag;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // turn off castling if we capture a rook\r\n        if (this._castling[them]) {\r\n            for (let i = 0, len = ROOKS[them].length; i < len; i++) {\r\n                if (move.to === ROOKS[them][i].square &&\r\n                    this._castling[them] & ROOKS[them][i].flag) {\r\n                    this._castling[them] ^= ROOKS[them][i].flag;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this._hash ^= this._castlingKey();\r\n        // if big pawn move, update the en passant square\r\n        if (move.flags & BITS.BIG_PAWN) {\r\n            let epSquare;\r\n            if (us === exports.BLACK) {\r\n                epSquare = move.to - 16;\r\n            }\r\n            else {\r\n                epSquare = move.to + 16;\r\n            }\r\n            if ((!((move.to - 1) & 0x88) &&\r\n                this._board[move.to - 1]?.type === exports.PAWN &&\r\n                this._board[move.to - 1]?.color === them) ||\r\n                (!((move.to + 1) & 0x88) &&\r\n                    this._board[move.to + 1]?.type === exports.PAWN &&\r\n                    this._board[move.to + 1]?.color === them)) {\r\n                this._epSquare = epSquare;\r\n                this._hash ^= this._epKey();\r\n            }\r\n            else {\r\n                this._epSquare = EMPTY;\r\n            }\r\n        }\r\n        else {\r\n            this._epSquare = EMPTY;\r\n        }\r\n        // reset the 50 move counter if a pawn is moved or a piece is captured\r\n        if (move.piece === exports.PAWN) {\r\n            this._halfMoves = 0;\r\n        }\r\n        else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\r\n            this._halfMoves = 0;\r\n        }\r\n        else {\r\n            this._halfMoves++;\r\n        }\r\n        if (us === exports.BLACK) {\r\n            this._moveNumber++;\r\n        }\r\n        this._turn = them;\r\n        this._hash ^= SIDE_KEY;\r\n    }\r\n    undo() {\r\n        const hash = this._hash;\r\n        const move = this._undoMove();\r\n        if (move) {\r\n            const prettyMove = new Move(this, move);\r\n            this._decPositionCount(hash);\r\n            return prettyMove;\r\n        }\r\n        return null;\r\n    }\r\n    _undoMove() {\r\n        const old = this._history.pop();\r\n        if (old === undefined) {\r\n            return null;\r\n        }\r\n        this._hash ^= this._epKey();\r\n        this._hash ^= this._castlingKey();\r\n        const move = old.move;\r\n        this._kings = old.kings;\r\n        this._turn = old.turn;\r\n        this._castling = old.castling;\r\n        this._epSquare = old.epSquare;\r\n        this._halfMoves = old.halfMoves;\r\n        this._moveNumber = old.moveNumber;\r\n        this._hash ^= this._epKey();\r\n        this._hash ^= this._castlingKey();\r\n        this._hash ^= SIDE_KEY;\r\n        const us = this._turn;\r\n        const them = swapColor(us);\r\n        this._movePiece(move.to, move.from);\r\n        // to undo any promotions\r\n        if (move.piece) {\r\n            this._clear(move.from);\r\n            this._set(move.from, { type: move.piece, color: us });\r\n        }\r\n        if (move.captured) {\r\n            if (move.flags & BITS.EP_CAPTURE) {\r\n                // en passant capture\r\n                let index;\r\n                if (us === exports.BLACK) {\r\n                    index = move.to - 16;\r\n                }\r\n                else {\r\n                    index = move.to + 16;\r\n                }\r\n                this._set(index, { type: exports.PAWN, color: them });\r\n            }\r\n            else {\r\n                // regular capture\r\n                this._set(move.to, { type: move.captured, color: them });\r\n            }\r\n        }\r\n        if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\r\n            let castlingTo, castlingFrom;\r\n            if (move.flags & BITS.KSIDE_CASTLE) {\r\n                castlingTo = move.to + 1;\r\n                castlingFrom = move.to - 1;\r\n            }\r\n            else {\r\n                castlingTo = move.to - 2;\r\n                castlingFrom = move.to + 1;\r\n            }\r\n            this._movePiece(castlingFrom, castlingTo);\r\n        }\r\n        return move;\r\n    }\r\n    pgn({ newline = '\\n', maxWidth = 0, } = {}) {\r\n        /*\r\n         * using the specification from http://www.chessclub.com/help/PGN-spec\r\n         * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\r\n         */\r\n        const result = [];\r\n        let headerExists = false;\r\n        /* add the PGN header information */\r\n        for (const i in this._header) {\r\n            /*\r\n             * TODO: order of enumerated properties in header object is not\r\n             * guaranteed, see ECMA-262 spec (section 12.6.4)\r\n             *\r\n             * By using HEADER_TEMPLATE, the order of tags should be preserved; we\r\n             * do have to check for null placeholders, though, and omit them\r\n             */\r\n            const headerTag = this._header[i];\r\n            if (headerTag)\r\n                result.push(`[${i} \"${this._header[i]}\"]` + newline);\r\n            headerExists = true;\r\n        }\r\n        if (headerExists && this._history.length) {\r\n            result.push(newline);\r\n        }\r\n        const appendComment = (moveString) => {\r\n            const comment = this._comments[this.fen()];\r\n            if (typeof comment !== 'undefined') {\r\n                const delimiter = moveString.length > 0 ? ' ' : '';\r\n                moveString = `${moveString}${delimiter}{${comment}}`;\r\n            }\r\n            return moveString;\r\n        };\r\n        // pop all of history onto reversed_history\r\n        const reversedHistory = [];\r\n        while (this._history.length > 0) {\r\n            reversedHistory.push(this._undoMove());\r\n        }\r\n        const moves = [];\r\n        let moveString = '';\r\n        // special case of a commented starting position with no moves\r\n        if (reversedHistory.length === 0) {\r\n            moves.push(appendComment(''));\r\n        }\r\n        // build the list of moves.  a move_string looks like: \"3. e3 e6\"\r\n        while (reversedHistory.length > 0) {\r\n            moveString = appendComment(moveString);\r\n            const move = reversedHistory.pop();\r\n            // make TypeScript stop complaining about move being undefined\r\n            if (!move) {\r\n                break;\r\n            }\r\n            // if the position started with black to move, start PGN with #. ...\r\n            if (!this._history.length && move.color === 'b') {\r\n                const prefix = `${this._moveNumber}. ...`;\r\n                // is there a comment preceding the first move?\r\n                moveString = moveString ? `${moveString} ${prefix}` : prefix;\r\n            }\r\n            else if (move.color === 'w') {\r\n                // store the previous generated move_string if we have one\r\n                if (moveString.length) {\r\n                    moves.push(moveString);\r\n                }\r\n                moveString = this._moveNumber + '.';\r\n            }\r\n            moveString =\r\n                moveString + ' ' + this._moveToSan(move, this._moves({ legal: true }));\r\n            this._makeMove(move);\r\n        }\r\n        // are there any other leftover moves?\r\n        if (moveString.length) {\r\n            moves.push(appendComment(moveString));\r\n        }\r\n        // is there a result? (there ALWAYS has to be a result according to spec; see Seven Tag Roster)\r\n        moves.push(this._header.Result || '*');\r\n        /*\r\n         * history should be back to what it was before we started generating PGN,\r\n         * so join together moves\r\n         */\r\n        if (maxWidth === 0) {\r\n            return result.join('') + moves.join(' ');\r\n        }\r\n        // TODO (jah): huh?\r\n        const strip = function () {\r\n            if (result.length > 0 && result[result.length - 1] === ' ') {\r\n                result.pop();\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        // NB: this does not preserve comment whitespace.\r\n        const wrapComment = function (width, move) {\r\n            for (const token of move.split(' ')) {\r\n                if (!token) {\r\n                    continue;\r\n                }\r\n                if (width + token.length > maxWidth) {\r\n                    while (strip()) {\r\n                        width--;\r\n                    }\r\n                    result.push(newline);\r\n                    width = 0;\r\n                }\r\n                result.push(token);\r\n                width += token.length;\r\n                result.push(' ');\r\n                width++;\r\n            }\r\n            if (strip()) {\r\n                width--;\r\n            }\r\n            return width;\r\n        };\r\n        // wrap the PGN output at max_width\r\n        let currentWidth = 0;\r\n        for (let i = 0; i < moves.length; i++) {\r\n            if (currentWidth + moves[i].length > maxWidth) {\r\n                if (moves[i].includes('{')) {\r\n                    currentWidth = wrapComment(currentWidth, moves[i]);\r\n                    continue;\r\n                }\r\n            }\r\n            // if the current move will push past max_width\r\n            if (currentWidth + moves[i].length > maxWidth && i !== 0) {\r\n                // don't end the line with whitespace\r\n                if (result[result.length - 1] === ' ') {\r\n                    result.pop();\r\n                }\r\n                result.push(newline);\r\n                currentWidth = 0;\r\n            }\r\n            else if (i !== 0) {\r\n                result.push(' ');\r\n                currentWidth++;\r\n            }\r\n            result.push(moves[i]);\r\n            currentWidth += moves[i].length;\r\n        }\r\n        return result.join('');\r\n    }\r\n    /**\r\n     * @deprecated Use `setHeader` and `getHeaders` instead. This method will return null header tags (which is not what you want)\r\n     */\r\n    header(...args) {\r\n        for (let i = 0; i < args.length; i += 2) {\r\n            if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\r\n                this._header[args[i]] = args[i + 1];\r\n            }\r\n        }\r\n        return this._header;\r\n    }\r\n    // TODO: value validation per spec\r\n    setHeader(key, value) {\r\n        this._header[key] = value ?? exports.SEVEN_TAG_ROSTER[key] ?? null;\r\n        return this.getHeaders();\r\n    }\r\n    removeHeader(key) {\r\n        if (key in this._header) {\r\n            this._header[key] = exports.SEVEN_TAG_ROSTER[key] || null;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    // return only non-null headers (omit placemarker nulls)\r\n    getHeaders() {\r\n        const nonNullHeaders = {};\r\n        for (const [key, value] of Object.entries(this._header)) {\r\n            if (value !== null) {\r\n                nonNullHeaders[key] = value;\r\n            }\r\n        }\r\n        return nonNullHeaders;\r\n    }\r\n    loadPgn(pgn, { strict = false, newlineChar = '\\r?\\n', } = {}) {\r\n        // If newlineChar is not the default, replace all instances with \\n\r\n        if (newlineChar !== '\\r?\\n') {\r\n            pgn = pgn.replace(new RegExp(newlineChar, 'g'), '\\n');\r\n        }\r\n        const parsedPgn = (0, pgn_1.parse)(pgn);\r\n        // Put the board in the starting position\r\n        this.reset();\r\n        // parse PGN header\r\n        const headers = parsedPgn.headers;\r\n        let fen = '';\r\n        for (const key in headers) {\r\n            // check to see user is including fen (possibly with wrong tag case)\r\n            if (key.toLowerCase() === 'fen') {\r\n                fen = headers[key];\r\n            }\r\n            this.header(key, headers[key]);\r\n        }\r\n        /*\r\n         * the permissive parser should attempt to load a fen tag, even if it's the\r\n         * wrong case and doesn't include a corresponding [SetUp \"1\"] tag\r\n         */\r\n        if (!strict) {\r\n            if (fen) {\r\n                this.load(fen, { preserveHeaders: true });\r\n            }\r\n        }\r\n        else {\r\n            /*\r\n             * strict parser - load the starting position indicated by [Setup '1']\r\n             * and [FEN position]\r\n             */\r\n            if (headers['SetUp'] === '1') {\r\n                if (!('FEN' in headers)) {\r\n                    throw new Error('Invalid PGN: FEN tag must be supplied with SetUp tag');\r\n                }\r\n                // don't clear the headers when loading\r\n                this.load(headers['FEN'], { preserveHeaders: true });\r\n            }\r\n        }\r\n        let node = parsedPgn.root;\r\n        while (node) {\r\n            if (node.move) {\r\n                const move = this._moveFromSan(node.move, strict);\r\n                if (move == null) {\r\n                    throw new Error(`Invalid move in PGN: ${node.move}`);\r\n                }\r\n                else {\r\n                    this._makeMove(move);\r\n                    this._incPositionCount();\r\n                }\r\n            }\r\n            if (node.comment !== undefined) {\r\n                this._comments[this.fen()] = node.comment;\r\n            }\r\n            node = node.variations[0];\r\n        }\r\n        /*\r\n         * Per section 8.2.6 of the PGN spec, the Result tag pair must match match\r\n         * the termination marker. Only do this when headers are present, but the\r\n         * result tag is missing\r\n         */\r\n        const result = parsedPgn.result;\r\n        if (result &&\r\n            Object.keys(this._header).length &&\r\n            this._header['Result'] !== result) {\r\n            this.setHeader('Result', result);\r\n        }\r\n    }\r\n    /*\r\n     * Convert a move from 0x88 coordinates to Standard Algebraic Notation\r\n     * (SAN)\r\n     *\r\n     * @param {boolean} strict Use the strict SAN parser. It will throw errors\r\n     * on overly disambiguated moves (see below):\r\n     *\r\n     * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\r\n     * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\r\n     * 4. ... Ne7 is technically the valid SAN\r\n     */\r\n    _moveToSan(move, moves) {\r\n        let output = '';\r\n        if (move.flags & BITS.KSIDE_CASTLE) {\r\n            output = 'O-O';\r\n        }\r\n        else if (move.flags & BITS.QSIDE_CASTLE) {\r\n            output = 'O-O-O';\r\n        }\r\n        else {\r\n            if (move.piece !== exports.PAWN) {\r\n                const disambiguator = getDisambiguator(move, moves);\r\n                output += move.piece.toUpperCase() + disambiguator;\r\n            }\r\n            if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\r\n                if (move.piece === exports.PAWN) {\r\n                    output += algebraic(move.from)[0];\r\n                }\r\n                output += 'x';\r\n            }\r\n            output += algebraic(move.to);\r\n            if (move.promotion) {\r\n                output += '=' + move.promotion.toUpperCase();\r\n            }\r\n        }\r\n        this._makeMove(move);\r\n        if (this.isCheck()) {\r\n            if (this.isCheckmate()) {\r\n                output += '#';\r\n            }\r\n            else {\r\n                output += '+';\r\n            }\r\n        }\r\n        this._undoMove();\r\n        return output;\r\n    }\r\n    // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\r\n    _moveFromSan(move, strict = false) {\r\n        // strip off any move decorations: e.g Nf3+?! becomes Nf3\r\n        let cleanMove = strippedSan(move);\r\n        if (!strict) {\r\n            if (cleanMove === '0-0') {\r\n                cleanMove = 'O-O';\r\n            }\r\n            else if (cleanMove === '0-0-0') {\r\n                cleanMove = 'O-O-O';\r\n            }\r\n        }\r\n        let pieceType = inferPieceType(cleanMove);\r\n        let moves = this._moves({ legal: true, piece: pieceType });\r\n        // strict parser\r\n        for (let i = 0, len = moves.length; i < len; i++) {\r\n            if (cleanMove === strippedSan(this._moveToSan(moves[i], moves))) {\r\n                return moves[i];\r\n            }\r\n        }\r\n        // the strict parser failed\r\n        if (strict) {\r\n            return null;\r\n        }\r\n        let piece = undefined;\r\n        let matches = undefined;\r\n        let from = undefined;\r\n        let to = undefined;\r\n        let promotion = undefined;\r\n        /*\r\n         * The default permissive (non-strict) parser allows the user to parse\r\n         * non-standard chess notations. This parser is only run after the strict\r\n         * Standard Algebraic Notation (SAN) parser has failed.\r\n         *\r\n         * When running the permissive parser, we'll run a regex to grab the piece, the\r\n         * to/from square, and an optional promotion piece. This regex will\r\n         * parse common non-standard notation like: Pe2-e4, Rc1c4, Qf3xf7,\r\n         * f7f8q, b1c3\r\n         *\r\n         * NOTE: Some positions and moves may be ambiguous when using the permissive\r\n         * parser. For example, in this position: 6k1/8/8/B7/8/8/8/BN4K1 w - - 0 1,\r\n         * the move b1c3 may be interpreted as Nc3 or B1c3 (a disambiguated bishop\r\n         * move). In these cases, the permissive parser will default to the most\r\n         * basic interpretation (which is b1c3 parsing to Nc3).\r\n         */\r\n        let overlyDisambiguated = false;\r\n        matches = cleanMove.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/);\r\n        if (matches) {\r\n            piece = matches[1];\r\n            from = matches[2];\r\n            to = matches[3];\r\n            promotion = matches[4];\r\n            if (from.length == 1) {\r\n                overlyDisambiguated = true;\r\n            }\r\n        }\r\n        else {\r\n            /*\r\n             * The [a-h]?[1-8]? portion of the regex below handles moves that may be\r\n             * overly disambiguated (e.g. Nge7 is unnecessary and non-standard when\r\n             * there is one legal knight move to e7). In this case, the value of\r\n             * 'from' variable will be a rank or file, not a square.\r\n             */\r\n            matches = cleanMove.match(/([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/);\r\n            if (matches) {\r\n                piece = matches[1];\r\n                from = matches[2];\r\n                to = matches[3];\r\n                promotion = matches[4];\r\n                if (from.length == 1) {\r\n                    overlyDisambiguated = true;\r\n                }\r\n            }\r\n        }\r\n        pieceType = inferPieceType(cleanMove);\r\n        moves = this._moves({\r\n            legal: true,\r\n            piece: piece ? piece : pieceType,\r\n        });\r\n        if (!to) {\r\n            return null;\r\n        }\r\n        for (let i = 0, len = moves.length; i < len; i++) {\r\n            if (!from) {\r\n                // if there is no from square, it could be just 'x' missing from a capture\r\n                if (cleanMove ===\r\n                    strippedSan(this._moveToSan(moves[i], moves)).replace('x', '')) {\r\n                    return moves[i];\r\n                }\r\n                // hand-compare move properties with the results from our permissive regex\r\n            }\r\n            else if ((!piece || piece.toLowerCase() == moves[i].piece) &&\r\n                Ox88[from] == moves[i].from &&\r\n                Ox88[to] == moves[i].to &&\r\n                (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\r\n                return moves[i];\r\n            }\r\n            else if (overlyDisambiguated) {\r\n                /*\r\n                 * SPECIAL CASE: we parsed a move string that may have an unneeded\r\n                 * rank/file disambiguator (e.g. Nge7).  The 'from' variable will\r\n                 */\r\n                const square = algebraic(moves[i].from);\r\n                if ((!piece || piece.toLowerCase() == moves[i].piece) &&\r\n                    Ox88[to] == moves[i].to &&\r\n                    (from == square[0] || from == square[1]) &&\r\n                    (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\r\n                    return moves[i];\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    ascii() {\r\n        let s = '   +------------------------+\\n';\r\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\r\n            // display the rank\r\n            if (file(i) === 0) {\r\n                s += ' ' + '87654321'[rank(i)] + ' |';\r\n            }\r\n            if (this._board[i]) {\r\n                const piece = this._board[i].type;\r\n                const color = this._board[i].color;\r\n                const symbol = color === exports.WHITE ? piece.toUpperCase() : piece.toLowerCase();\r\n                s += ' ' + symbol + ' ';\r\n            }\r\n            else {\r\n                s += ' . ';\r\n            }\r\n            if ((i + 1) & 0x88) {\r\n                s += '|\\n';\r\n                i += 8;\r\n            }\r\n        }\r\n        s += '   +------------------------+\\n';\r\n        s += '     a  b  c  d  e  f  g  h';\r\n        return s;\r\n    }\r\n    perft(depth) {\r\n        const moves = this._moves({ legal: false });\r\n        let nodes = 0;\r\n        const color = this._turn;\r\n        for (let i = 0, len = moves.length; i < len; i++) {\r\n            this._makeMove(moves[i]);\r\n            if (!this._isKingAttacked(color)) {\r\n                if (depth - 1 > 0) {\r\n                    nodes += this.perft(depth - 1);\r\n                }\r\n                else {\r\n                    nodes++;\r\n                }\r\n            }\r\n            this._undoMove();\r\n        }\r\n        return nodes;\r\n    }\r\n    turn() {\r\n        return this._turn;\r\n    }\r\n    board() {\r\n        const output = [];\r\n        let row = [];\r\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\r\n            if (this._board[i] == null) {\r\n                row.push(null);\r\n            }\r\n            else {\r\n                row.push({\r\n                    square: algebraic(i),\r\n                    type: this._board[i].type,\r\n                    color: this._board[i].color,\r\n                });\r\n            }\r\n            if ((i + 1) & 0x88) {\r\n                output.push(row);\r\n                row = [];\r\n                i += 8;\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n    squareColor(square) {\r\n        if (square in Ox88) {\r\n            const sq = Ox88[square];\r\n            return (rank(sq) + file(sq)) % 2 === 0 ? 'light' : 'dark';\r\n        }\r\n        return null;\r\n    }\r\n    history({ verbose = false } = {}) {\r\n        const reversedHistory = [];\r\n        const moveHistory = [];\r\n        while (this._history.length > 0) {\r\n            reversedHistory.push(this._undoMove());\r\n        }\r\n        while (true) {\r\n            const move = reversedHistory.pop();\r\n            if (!move) {\r\n                break;\r\n            }\r\n            if (verbose) {\r\n                moveHistory.push(new Move(this, move));\r\n            }\r\n            else {\r\n                moveHistory.push(this._moveToSan(move, this._moves()));\r\n            }\r\n            this._makeMove(move);\r\n        }\r\n        return moveHistory;\r\n    }\r\n    /*\r\n     * Keeps track of position occurrence counts for the purpose of repetition\r\n     * checking. Old positions are removed from the map if their counts are reduced to 0.\r\n     */\r\n    _getPositionCount(hash) {\r\n        return this._positionCount.get(hash) ?? 0;\r\n    }\r\n    _incPositionCount() {\r\n        this._positionCount.set(this._hash, (this._positionCount.get(this._hash) ?? 0) + 1);\r\n    }\r\n    _decPositionCount(hash) {\r\n        const currentCount = this._positionCount.get(hash) ?? 0;\r\n        if (currentCount === 1) {\r\n            this._positionCount.delete(hash);\r\n        }\r\n        else {\r\n            this._positionCount.set(hash, currentCount - 1);\r\n        }\r\n    }\r\n    _pruneComments() {\r\n        const reversedHistory = [];\r\n        const currentComments = {};\r\n        const copyComment = (fen) => {\r\n            if (fen in this._comments) {\r\n                currentComments[fen] = this._comments[fen];\r\n            }\r\n        };\r\n        while (this._history.length > 0) {\r\n            reversedHistory.push(this._undoMove());\r\n        }\r\n        copyComment(this.fen());\r\n        while (true) {\r\n            const move = reversedHistory.pop();\r\n            if (!move) {\r\n                break;\r\n            }\r\n            this._makeMove(move);\r\n            copyComment(this.fen());\r\n        }\r\n        this._comments = currentComments;\r\n    }\r\n    getComment() {\r\n        return this._comments[this.fen()];\r\n    }\r\n    setComment(comment) {\r\n        this._comments[this.fen()] = comment.replace('{', '[').replace('}', ']');\r\n    }\r\n    /**\r\n     * @deprecated Renamed to `removeComment` for consistency\r\n     */\r\n    deleteComment() {\r\n        return this.removeComment();\r\n    }\r\n    removeComment() {\r\n        const comment = this._comments[this.fen()];\r\n        delete this._comments[this.fen()];\r\n        return comment;\r\n    }\r\n    getComments() {\r\n        this._pruneComments();\r\n        return Object.keys(this._comments).map((fen) => {\r\n            return { fen: fen, comment: this._comments[fen] };\r\n        });\r\n    }\r\n    /**\r\n     * @deprecated Renamed to `removeComments` for consistency\r\n     */\r\n    deleteComments() {\r\n        return this.removeComments();\r\n    }\r\n    removeComments() {\r\n        this._pruneComments();\r\n        return Object.keys(this._comments).map((fen) => {\r\n            const comment = this._comments[fen];\r\n            delete this._comments[fen];\r\n            return { fen: fen, comment: comment };\r\n        });\r\n    }\r\n    setCastlingRights(color, rights) {\r\n        for (const side of [exports.KING, exports.QUEEN]) {\r\n            if (rights[side] !== undefined) {\r\n                if (rights[side]) {\r\n                    this._castling[color] |= SIDES[side];\r\n                }\r\n                else {\r\n                    this._castling[color] &= ~SIDES[side];\r\n                }\r\n            }\r\n        }\r\n        this._updateCastlingRights();\r\n        const result = this.getCastlingRights(color);\r\n        return ((rights[exports.KING] === undefined || rights[exports.KING] === result[exports.KING]) &&\r\n            (rights[exports.QUEEN] === undefined || rights[exports.QUEEN] === result[exports.QUEEN]));\r\n    }\r\n    getCastlingRights(color) {\r\n        return {\r\n            [exports.KING]: (this._castling[color] & SIDES[exports.KING]) !== 0,\r\n            [exports.QUEEN]: (this._castling[color] & SIDES[exports.QUEEN]) !== 0,\r\n        };\r\n    }\r\n    moveNumber() {\r\n        return this._moveNumber;\r\n    }\r\n}\r\nexports.Chess = Chess;\r\n//# sourceMappingURL=chess.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chess.js/dist/cjs/chess.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/chess.js/dist/cjs/pgn.js":
/*!***********************************************!*\
  !*** ./node_modules/chess.js/dist/cjs/pgn.js ***!
  \***********************************************/
/***/ ((module) => {

eval("// @generated by Peggy 4.2.0.\r\n//\r\n// https://peggyjs.org/\r\n\r\n\r\n\r\n\r\n\r\n  function rootNode(comment) {\r\n  \treturn comment !== null ? { comment, variations: [] } : { variations: []}\r\n  }\r\n\r\n  function node(move, suffix, nag, comment, variations) {\r\n  \tconst node = { move, variations }\r\n\r\n    if (suffix) {\r\n    \tnode.suffix = suffix\r\n    }\r\n\r\n    if (nag) {\r\n    \tnode.nag = nag\r\n    }\r\n\r\n    if (comment !== null) {\r\n    \tnode.comment = comment\r\n    }\r\n\r\n    return node\r\n  }\r\n\r\n  function lineToTree(...nodes) {\r\n  \tconst [root, ...rest] = nodes;\r\n\r\n    let parent = root\r\n\r\n    for (const child of rest) {\r\n    \tif (child !== null) {\r\n        \tparent.variations = [child, ...child.variations]\r\n            child.variations = []\r\n            parent = child\r\n        }\r\n    }\r\n\r\n  \treturn root\r\n  }\r\n\r\n  function pgn(headers, game) {\r\n  \tif (game.marker && game.marker.comment) {\r\n    \tlet node = game.root\r\n        while (true) {\r\n        \tconst next = node.variations[0]\r\n            if (!next) {\r\n            \tnode.comment = game.marker.comment\r\n            \tbreak\r\n            }\r\n            node = next\r\n        }\r\n    }\r\n\r\n  \treturn {\r\n    \theaders,\r\n        root: game.root,\r\n        result: (game.marker && game.marker.result) ?? undefined\r\n    }\r\n  }\r\n\r\nfunction peg$subclass(child, parent) {\r\n  function C() { this.constructor = child; }\r\n  C.prototype = parent.prototype;\r\n  child.prototype = new C();\r\n}\r\n\r\nfunction peg$SyntaxError(message, expected, found, location) {\r\n  var self = Error.call(this, message);\r\n  // istanbul ignore next Check is a necessary evil to support older environments\r\n  if (Object.setPrototypeOf) {\r\n    Object.setPrototypeOf(self, peg$SyntaxError.prototype);\r\n  }\r\n  self.expected = expected;\r\n  self.found = found;\r\n  self.location = location;\r\n  self.name = \"SyntaxError\";\r\n  return self;\r\n}\r\n\r\npeg$subclass(peg$SyntaxError, Error);\r\n\r\nfunction peg$padEnd(str, targetLength, padString) {\r\n  padString = padString || \" \";\r\n  if (str.length > targetLength) { return str; }\r\n  targetLength -= str.length;\r\n  padString += padString.repeat(targetLength);\r\n  return str + padString.slice(0, targetLength);\r\n}\r\n\r\npeg$SyntaxError.prototype.format = function(sources) {\r\n  var str = \"Error: \" + this.message;\r\n  if (this.location) {\r\n    var src = null;\r\n    var k;\r\n    for (k = 0; k < sources.length; k++) {\r\n      if (sources[k].source === this.location.source) {\r\n        src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\r\n        break;\r\n      }\r\n    }\r\n    var s = this.location.start;\r\n    var offset_s = (this.location.source && (typeof this.location.source.offset === \"function\"))\r\n      ? this.location.source.offset(s)\r\n      : s;\r\n    var loc = this.location.source + \":\" + offset_s.line + \":\" + offset_s.column;\r\n    if (src) {\r\n      var e = this.location.end;\r\n      var filler = peg$padEnd(\"\", offset_s.line.toString().length, ' ');\r\n      var line = src[s.line - 1];\r\n      var last = s.line === e.line ? e.column : line.length + 1;\r\n      var hatLen = (last - s.column) || 1;\r\n      str += \"\\n --> \" + loc + \"\\n\"\r\n          + filler + \" |\\n\"\r\n          + offset_s.line + \" | \" + line + \"\\n\"\r\n          + filler + \" | \" + peg$padEnd(\"\", s.column - 1, ' ')\r\n          + peg$padEnd(\"\", hatLen, \"^\");\r\n    } else {\r\n      str += \"\\n at \" + loc;\r\n    }\r\n  }\r\n  return str;\r\n};\r\n\r\npeg$SyntaxError.buildMessage = function(expected, found) {\r\n  var DESCRIBE_EXPECTATION_FNS = {\r\n    literal: function(expectation) {\r\n      return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\r\n    },\r\n\r\n    class: function(expectation) {\r\n      var escapedParts = expectation.parts.map(function(part) {\r\n        return Array.isArray(part)\r\n          ? classEscape(part[0]) + \"-\" + classEscape(part[1])\r\n          : classEscape(part);\r\n      });\r\n\r\n      return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts.join(\"\") + \"]\";\r\n    },\r\n\r\n    any: function() {\r\n      return \"any character\";\r\n    },\r\n\r\n    end: function() {\r\n      return \"end of input\";\r\n    },\r\n\r\n    other: function(expectation) {\r\n      return expectation.description;\r\n    }\r\n  };\r\n\r\n  function hex(ch) {\r\n    return ch.charCodeAt(0).toString(16).toUpperCase();\r\n  }\r\n\r\n  function literalEscape(s) {\r\n    return s\r\n      .replace(/\\\\/g, \"\\\\\\\\\")\r\n      .replace(/\"/g,  \"\\\\\\\"\")\r\n      .replace(/\\0/g, \"\\\\0\")\r\n      .replace(/\\t/g, \"\\\\t\")\r\n      .replace(/\\n/g, \"\\\\n\")\r\n      .replace(/\\r/g, \"\\\\r\")\r\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\r\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\r\n  }\r\n\r\n  function classEscape(s) {\r\n    return s\r\n      .replace(/\\\\/g, \"\\\\\\\\\")\r\n      .replace(/\\]/g, \"\\\\]\")\r\n      .replace(/\\^/g, \"\\\\^\")\r\n      .replace(/-/g,  \"\\\\-\")\r\n      .replace(/\\0/g, \"\\\\0\")\r\n      .replace(/\\t/g, \"\\\\t\")\r\n      .replace(/\\n/g, \"\\\\n\")\r\n      .replace(/\\r/g, \"\\\\r\")\r\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\r\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\r\n  }\r\n\r\n  function describeExpectation(expectation) {\r\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\r\n  }\r\n\r\n  function describeExpected(expected) {\r\n    var descriptions = expected.map(describeExpectation);\r\n    var i, j;\r\n\r\n    descriptions.sort();\r\n\r\n    if (descriptions.length > 0) {\r\n      for (i = 1, j = 1; i < descriptions.length; i++) {\r\n        if (descriptions[i - 1] !== descriptions[i]) {\r\n          descriptions[j] = descriptions[i];\r\n          j++;\r\n        }\r\n      }\r\n      descriptions.length = j;\r\n    }\r\n\r\n    switch (descriptions.length) {\r\n      case 1:\r\n        return descriptions[0];\r\n\r\n      case 2:\r\n        return descriptions[0] + \" or \" + descriptions[1];\r\n\r\n      default:\r\n        return descriptions.slice(0, -1).join(\", \")\r\n          + \", or \"\r\n          + descriptions[descriptions.length - 1];\r\n    }\r\n  }\r\n\r\n  function describeFound(found) {\r\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\r\n  }\r\n\r\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\r\n};\r\n\r\nfunction peg$parse(input, options) {\r\n  options = options !== undefined ? options : {};\r\n\r\n  var peg$FAILED = {};\r\n  var peg$source = options.grammarSource;\r\n\r\n  var peg$startRuleFunctions = { pgn: peg$parsepgn };\r\n  var peg$startRuleFunction = peg$parsepgn;\r\n\r\n  var peg$c0 = \"[\";\r\n  var peg$c1 = \"\\\"\";\r\n  var peg$c2 = \"]\";\r\n  var peg$c3 = \".\";\r\n  var peg$c4 = \"O-O-O\";\r\n  var peg$c5 = \"O-O\";\r\n  var peg$c6 = \"0-0-0\";\r\n  var peg$c7 = \"0-0\";\r\n  var peg$c8 = \"$\";\r\n  var peg$c9 = \"{\";\r\n  var peg$c10 = \"}\";\r\n  var peg$c11 = \";\";\r\n  var peg$c12 = \"(\";\r\n  var peg$c13 = \")\";\r\n  var peg$c14 = \"1-0\";\r\n  var peg$c15 = \"0-1\";\r\n  var peg$c16 = \"1/2-1/2\";\r\n  var peg$c17 = \"*\";\r\n\r\n  var peg$r0 = /^[a-zA-Z]/;\r\n  var peg$r1 = /^[^\"]/;\r\n  var peg$r2 = /^[0-9]/;\r\n  var peg$r3 = /^[.]/;\r\n  var peg$r4 = /^[a-zA-Z1-8\\-=]/;\r\n  var peg$r5 = /^[+#]/;\r\n  var peg$r6 = /^[!?]/;\r\n  var peg$r7 = /^[^}]/;\r\n  var peg$r8 = /^[^\\r\\n]/;\r\n  var peg$r9 = /^[ \\t\\r\\n]/;\r\n\r\n  var peg$e0 = peg$otherExpectation(\"tag pair\");\r\n  var peg$e1 = peg$literalExpectation(\"[\", false);\r\n  var peg$e2 = peg$literalExpectation(\"\\\"\", false);\r\n  var peg$e3 = peg$literalExpectation(\"]\", false);\r\n  var peg$e4 = peg$otherExpectation(\"tag name\");\r\n  var peg$e5 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false);\r\n  var peg$e6 = peg$otherExpectation(\"tag value\");\r\n  var peg$e7 = peg$classExpectation([\"\\\"\"], true, false);\r\n  var peg$e8 = peg$otherExpectation(\"move number\");\r\n  var peg$e9 = peg$classExpectation([[\"0\", \"9\"]], false, false);\r\n  var peg$e10 = peg$literalExpectation(\".\", false);\r\n  var peg$e11 = peg$classExpectation([\".\"], false, false);\r\n  var peg$e12 = peg$otherExpectation(\"standard algebraic notation\");\r\n  var peg$e13 = peg$literalExpectation(\"O-O-O\", false);\r\n  var peg$e14 = peg$literalExpectation(\"O-O\", false);\r\n  var peg$e15 = peg$literalExpectation(\"0-0-0\", false);\r\n  var peg$e16 = peg$literalExpectation(\"0-0\", false);\r\n  var peg$e17 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"1\", \"8\"], \"-\", \"=\"], false, false);\r\n  var peg$e18 = peg$classExpectation([\"+\", \"#\"], false, false);\r\n  var peg$e19 = peg$otherExpectation(\"suffix annotation\");\r\n  var peg$e20 = peg$classExpectation([\"!\", \"?\"], false, false);\r\n  var peg$e21 = peg$otherExpectation(\"NAG\");\r\n  var peg$e22 = peg$literalExpectation(\"$\", false);\r\n  var peg$e23 = peg$otherExpectation(\"brace comment\");\r\n  var peg$e24 = peg$literalExpectation(\"{\", false);\r\n  var peg$e25 = peg$classExpectation([\"}\"], true, false);\r\n  var peg$e26 = peg$literalExpectation(\"}\", false);\r\n  var peg$e27 = peg$otherExpectation(\"rest of line comment\");\r\n  var peg$e28 = peg$literalExpectation(\";\", false);\r\n  var peg$e29 = peg$classExpectation([\"\\r\", \"\\n\"], true, false);\r\n  var peg$e30 = peg$otherExpectation(\"variation\");\r\n  var peg$e31 = peg$literalExpectation(\"(\", false);\r\n  var peg$e32 = peg$literalExpectation(\")\", false);\r\n  var peg$e33 = peg$otherExpectation(\"game termination marker\");\r\n  var peg$e34 = peg$literalExpectation(\"1-0\", false);\r\n  var peg$e35 = peg$literalExpectation(\"0-1\", false);\r\n  var peg$e36 = peg$literalExpectation(\"1/2-1/2\", false);\r\n  var peg$e37 = peg$literalExpectation(\"*\", false);\r\n  var peg$e38 = peg$otherExpectation(\"whitespace\");\r\n  var peg$e39 = peg$classExpectation([\" \", \"\\t\", \"\\r\", \"\\n\"], false, false);\r\n\r\n  var peg$f0 = function(headers, game) { return pgn(headers, game) };\r\n  var peg$f1 = function(tagPairs) { return Object.fromEntries(tagPairs) };\r\n  var peg$f2 = function(tagName, tagValue) { return [tagName, tagValue] };\r\n  var peg$f3 = function(root, marker) { return { root, marker} };\r\n  var peg$f4 = function(comment, moves) { return lineToTree(rootNode(comment), ...moves.flat()) };\r\n  var peg$f5 = function(san, suffix, nag, comment, variations) { return node(san, suffix, nag, comment, variations) };\r\n  var peg$f6 = function(nag) { return nag };\r\n  var peg$f7 = function(comment) { return comment.replace(/[\\r\\n]+/g, \" \") };\r\n  var peg$f8 = function(comment) { return comment.trim() };\r\n  var peg$f9 = function(line) { return line };\r\n  var peg$f10 = function(result, comment) { return { result, comment } };\r\n  var peg$currPos = options.peg$currPos | 0;\r\n  var peg$savedPos = peg$currPos;\r\n  var peg$posDetailsCache = [{ line: 1, column: 1 }];\r\n  var peg$maxFailPos = peg$currPos;\r\n  var peg$maxFailExpected = options.peg$maxFailExpected || [];\r\n  var peg$silentFails = options.peg$silentFails | 0;\r\n\r\n  var peg$result;\r\n\r\n  if (options.startRule) {\r\n    if (!(options.startRule in peg$startRuleFunctions)) {\r\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\r\n    }\r\n\r\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\r\n  }\r\n\r\n  function text() {\r\n    return input.substring(peg$savedPos, peg$currPos);\r\n  }\r\n\r\n  function offset() {\r\n    return peg$savedPos;\r\n  }\r\n\r\n  function range() {\r\n    return {\r\n      source: peg$source,\r\n      start: peg$savedPos,\r\n      end: peg$currPos\r\n    };\r\n  }\r\n\r\n  function location() {\r\n    return peg$computeLocation(peg$savedPos, peg$currPos);\r\n  }\r\n\r\n  function expected(description, location) {\r\n    location = location !== undefined\r\n      ? location\r\n      : peg$computeLocation(peg$savedPos, peg$currPos);\r\n\r\n    throw peg$buildStructuredError(\r\n      [peg$otherExpectation(description)],\r\n      input.substring(peg$savedPos, peg$currPos),\r\n      location\r\n    );\r\n  }\r\n\r\n  function error(message, location) {\r\n    location = location !== undefined\r\n      ? location\r\n      : peg$computeLocation(peg$savedPos, peg$currPos);\r\n\r\n    throw peg$buildSimpleError(message, location);\r\n  }\r\n\r\n  function peg$literalExpectation(text, ignoreCase) {\r\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\r\n  }\r\n\r\n  function peg$classExpectation(parts, inverted, ignoreCase) {\r\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\r\n  }\r\n\r\n  function peg$anyExpectation() {\r\n    return { type: \"any\" };\r\n  }\r\n\r\n  function peg$endExpectation() {\r\n    return { type: \"end\" };\r\n  }\r\n\r\n  function peg$otherExpectation(description) {\r\n    return { type: \"other\", description: description };\r\n  }\r\n\r\n  function peg$computePosDetails(pos) {\r\n    var details = peg$posDetailsCache[pos];\r\n    var p;\r\n\r\n    if (details) {\r\n      return details;\r\n    } else {\r\n      if (pos >= peg$posDetailsCache.length) {\r\n        p = peg$posDetailsCache.length - 1;\r\n      } else {\r\n        p = pos;\r\n        while (!peg$posDetailsCache[--p]) {}\r\n      }\r\n\r\n      details = peg$posDetailsCache[p];\r\n      details = {\r\n        line: details.line,\r\n        column: details.column\r\n      };\r\n\r\n      while (p < pos) {\r\n        if (input.charCodeAt(p) === 10) {\r\n          details.line++;\r\n          details.column = 1;\r\n        } else {\r\n          details.column++;\r\n        }\r\n\r\n        p++;\r\n      }\r\n\r\n      peg$posDetailsCache[pos] = details;\r\n\r\n      return details;\r\n    }\r\n  }\r\n\r\n  function peg$computeLocation(startPos, endPos, offset) {\r\n    var startPosDetails = peg$computePosDetails(startPos);\r\n    var endPosDetails = peg$computePosDetails(endPos);\r\n\r\n    var res = {\r\n      source: peg$source,\r\n      start: {\r\n        offset: startPos,\r\n        line: startPosDetails.line,\r\n        column: startPosDetails.column\r\n      },\r\n      end: {\r\n        offset: endPos,\r\n        line: endPosDetails.line,\r\n        column: endPosDetails.column\r\n      }\r\n    };\r\n    if (offset && peg$source && (typeof peg$source.offset === \"function\")) {\r\n      res.start = peg$source.offset(res.start);\r\n      res.end = peg$source.offset(res.end);\r\n    }\r\n    return res;\r\n  }\r\n\r\n  function peg$fail(expected) {\r\n    if (peg$currPos < peg$maxFailPos) { return; }\r\n\r\n    if (peg$currPos > peg$maxFailPos) {\r\n      peg$maxFailPos = peg$currPos;\r\n      peg$maxFailExpected = [];\r\n    }\r\n\r\n    peg$maxFailExpected.push(expected);\r\n  }\r\n\r\n  function peg$buildSimpleError(message, location) {\r\n    return new peg$SyntaxError(message, null, null, location);\r\n  }\r\n\r\n  function peg$buildStructuredError(expected, found, location) {\r\n    return new peg$SyntaxError(\r\n      peg$SyntaxError.buildMessage(expected, found),\r\n      expected,\r\n      found,\r\n      location\r\n    );\r\n  }\r\n\r\n  function peg$parsepgn() {\r\n    var s0, s1, s2;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parsetagPairSection();\r\n    s2 = peg$parsemoveTextSection();\r\n    peg$savedPos = s0;\r\n    s0 = peg$f0(s1, s2);\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsetagPairSection() {\r\n    var s0, s1, s2;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = [];\r\n    s2 = peg$parsetagPair();\r\n    while (s2 !== peg$FAILED) {\r\n      s1.push(s2);\r\n      s2 = peg$parsetagPair();\r\n    }\r\n    s2 = peg$parse_();\r\n    peg$savedPos = s0;\r\n    s0 = peg$f1(s1);\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsetagPair() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\r\n\r\n    peg$silentFails++;\r\n    s0 = peg$currPos;\r\n    s1 = peg$parse_();\r\n    if (input.charCodeAt(peg$currPos) === 91) {\r\n      s2 = peg$c0;\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e1); }\r\n    }\r\n    if (s2 !== peg$FAILED) {\r\n      s3 = peg$parse_();\r\n      s4 = peg$parsetagName();\r\n      if (s4 !== peg$FAILED) {\r\n        s5 = peg$parse_();\r\n        if (input.charCodeAt(peg$currPos) === 34) {\r\n          s6 = peg$c1;\r\n          peg$currPos++;\r\n        } else {\r\n          s6 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$e2); }\r\n        }\r\n        if (s6 !== peg$FAILED) {\r\n          s7 = peg$parsetagValue();\r\n          if (input.charCodeAt(peg$currPos) === 34) {\r\n            s8 = peg$c1;\r\n            peg$currPos++;\r\n          } else {\r\n            s8 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$e2); }\r\n          }\r\n          if (s8 !== peg$FAILED) {\r\n            s9 = peg$parse_();\r\n            if (input.charCodeAt(peg$currPos) === 93) {\r\n              s10 = peg$c2;\r\n              peg$currPos++;\r\n            } else {\r\n              s10 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$e3); }\r\n            }\r\n            if (s10 !== peg$FAILED) {\r\n              peg$savedPos = s0;\r\n              s0 = peg$f2(s4, s7);\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    peg$silentFails--;\r\n    if (s0 === peg$FAILED) {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e0); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsetagName() {\r\n    var s0, s1, s2;\r\n\r\n    peg$silentFails++;\r\n    s0 = peg$currPos;\r\n    s1 = [];\r\n    s2 = input.charAt(peg$currPos);\r\n    if (peg$r0.test(s2)) {\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e5); }\r\n    }\r\n    if (s2 !== peg$FAILED) {\r\n      while (s2 !== peg$FAILED) {\r\n        s1.push(s2);\r\n        s2 = input.charAt(peg$currPos);\r\n        if (peg$r0.test(s2)) {\r\n          peg$currPos++;\r\n        } else {\r\n          s2 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$e5); }\r\n        }\r\n      }\r\n    } else {\r\n      s1 = peg$FAILED;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s0 = input.substring(s0, peg$currPos);\r\n    } else {\r\n      s0 = s1;\r\n    }\r\n    peg$silentFails--;\r\n    if (s0 === peg$FAILED) {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e4); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsetagValue() {\r\n    var s0, s1, s2;\r\n\r\n    peg$silentFails++;\r\n    s0 = peg$currPos;\r\n    s1 = [];\r\n    s2 = input.charAt(peg$currPos);\r\n    if (peg$r1.test(s2)) {\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e7); }\r\n    }\r\n    while (s2 !== peg$FAILED) {\r\n      s1.push(s2);\r\n      s2 = input.charAt(peg$currPos);\r\n      if (peg$r1.test(s2)) {\r\n        peg$currPos++;\r\n      } else {\r\n        s2 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$e7); }\r\n      }\r\n    }\r\n    s0 = input.substring(s0, peg$currPos);\r\n    peg$silentFails--;\r\n    s1 = peg$FAILED;\r\n    if (peg$silentFails === 0) { peg$fail(peg$e6); }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsemoveTextSection() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parseline();\r\n    s2 = peg$parse_();\r\n    s3 = peg$parsegameTerminationMarker();\r\n    if (s3 === peg$FAILED) {\r\n      s3 = null;\r\n    }\r\n    s4 = peg$parse_();\r\n    peg$savedPos = s0;\r\n    s0 = peg$f3(s1, s3);\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parseline() {\r\n    var s0, s1, s2, s3;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parsecomment();\r\n    if (s1 === peg$FAILED) {\r\n      s1 = null;\r\n    }\r\n    s2 = [];\r\n    s3 = peg$parsemove();\r\n    while (s3 !== peg$FAILED) {\r\n      s2.push(s3);\r\n      s3 = peg$parsemove();\r\n    }\r\n    peg$savedPos = s0;\r\n    s0 = peg$f4(s1, s2);\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsemove() {\r\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\r\n\r\n    s0 = peg$currPos;\r\n    s1 = peg$parse_();\r\n    s2 = peg$parsemoveNumber();\r\n    if (s2 === peg$FAILED) {\r\n      s2 = null;\r\n    }\r\n    s3 = peg$parse_();\r\n    s4 = peg$parsesan();\r\n    if (s4 !== peg$FAILED) {\r\n      s5 = peg$parsesuffixAnnotation();\r\n      if (s5 === peg$FAILED) {\r\n        s5 = null;\r\n      }\r\n      s6 = [];\r\n      s7 = peg$parsenag();\r\n      while (s7 !== peg$FAILED) {\r\n        s6.push(s7);\r\n        s7 = peg$parsenag();\r\n      }\r\n      s7 = peg$parse_();\r\n      s8 = peg$parsecomment();\r\n      if (s8 === peg$FAILED) {\r\n        s8 = null;\r\n      }\r\n      s9 = [];\r\n      s10 = peg$parsevariation();\r\n      while (s10 !== peg$FAILED) {\r\n        s9.push(s10);\r\n        s10 = peg$parsevariation();\r\n      }\r\n      peg$savedPos = s0;\r\n      s0 = peg$f5(s4, s5, s6, s8, s9);\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsemoveNumber() {\r\n    var s0, s1, s2, s3, s4, s5;\r\n\r\n    peg$silentFails++;\r\n    s0 = peg$currPos;\r\n    s1 = [];\r\n    s2 = input.charAt(peg$currPos);\r\n    if (peg$r2.test(s2)) {\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e9); }\r\n    }\r\n    while (s2 !== peg$FAILED) {\r\n      s1.push(s2);\r\n      s2 = input.charAt(peg$currPos);\r\n      if (peg$r2.test(s2)) {\r\n        peg$currPos++;\r\n      } else {\r\n        s2 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$e9); }\r\n      }\r\n    }\r\n    if (input.charCodeAt(peg$currPos) === 46) {\r\n      s2 = peg$c3;\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e10); }\r\n    }\r\n    if (s2 !== peg$FAILED) {\r\n      s3 = peg$parse_();\r\n      s4 = [];\r\n      s5 = input.charAt(peg$currPos);\r\n      if (peg$r3.test(s5)) {\r\n        peg$currPos++;\r\n      } else {\r\n        s5 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$e11); }\r\n      }\r\n      while (s5 !== peg$FAILED) {\r\n        s4.push(s5);\r\n        s5 = input.charAt(peg$currPos);\r\n        if (peg$r3.test(s5)) {\r\n          peg$currPos++;\r\n        } else {\r\n          s5 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$e11); }\r\n        }\r\n      }\r\n      s1 = [s1, s2, s3, s4];\r\n      s0 = s1;\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    peg$silentFails--;\r\n    if (s0 === peg$FAILED) {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e8); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsesan() {\r\n    var s0, s1, s2, s3, s4, s5;\r\n\r\n    peg$silentFails++;\r\n    s0 = peg$currPos;\r\n    s1 = peg$currPos;\r\n    if (input.substr(peg$currPos, 5) === peg$c4) {\r\n      s2 = peg$c4;\r\n      peg$currPos += 5;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e13); }\r\n    }\r\n    if (s2 === peg$FAILED) {\r\n      if (input.substr(peg$currPos, 3) === peg$c5) {\r\n        s2 = peg$c5;\r\n        peg$currPos += 3;\r\n      } else {\r\n        s2 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$e14); }\r\n      }\r\n      if (s2 === peg$FAILED) {\r\n        if (input.substr(peg$currPos, 5) === peg$c6) {\r\n          s2 = peg$c6;\r\n          peg$currPos += 5;\r\n        } else {\r\n          s2 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$e15); }\r\n        }\r\n        if (s2 === peg$FAILED) {\r\n          if (input.substr(peg$currPos, 3) === peg$c7) {\r\n            s2 = peg$c7;\r\n            peg$currPos += 3;\r\n          } else {\r\n            s2 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$e16); }\r\n          }\r\n          if (s2 === peg$FAILED) {\r\n            s2 = peg$currPos;\r\n            s3 = input.charAt(peg$currPos);\r\n            if (peg$r0.test(s3)) {\r\n              peg$currPos++;\r\n            } else {\r\n              s3 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$e5); }\r\n            }\r\n            if (s3 !== peg$FAILED) {\r\n              s4 = [];\r\n              s5 = input.charAt(peg$currPos);\r\n              if (peg$r4.test(s5)) {\r\n                peg$currPos++;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$e17); }\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                while (s5 !== peg$FAILED) {\r\n                  s4.push(s5);\r\n                  s5 = input.charAt(peg$currPos);\r\n                  if (peg$r4.test(s5)) {\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s5 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$e17); }\r\n                  }\r\n                }\r\n              } else {\r\n                s4 = peg$FAILED;\r\n              }\r\n              if (s4 !== peg$FAILED) {\r\n                s3 = [s3, s4];\r\n                s2 = s3;\r\n              } else {\r\n                peg$currPos = s2;\r\n                s2 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s2;\r\n              s2 = peg$FAILED;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (s2 !== peg$FAILED) {\r\n      s3 = input.charAt(peg$currPos);\r\n      if (peg$r5.test(s3)) {\r\n        peg$currPos++;\r\n      } else {\r\n        s3 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$e18); }\r\n      }\r\n      if (s3 === peg$FAILED) {\r\n        s3 = null;\r\n      }\r\n      s2 = [s2, s3];\r\n      s1 = s2;\r\n    } else {\r\n      peg$currPos = s1;\r\n      s1 = peg$FAILED;\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s0 = input.substring(s0, peg$currPos);\r\n    } else {\r\n      s0 = s1;\r\n    }\r\n    peg$silentFails--;\r\n    if (s0 === peg$FAILED) {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e12); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsesuffixAnnotation() {\r\n    var s0, s1, s2;\r\n\r\n    peg$silentFails++;\r\n    s0 = peg$currPos;\r\n    s1 = [];\r\n    s2 = input.charAt(peg$currPos);\r\n    if (peg$r6.test(s2)) {\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e20); }\r\n    }\r\n    while (s2 !== peg$FAILED) {\r\n      s1.push(s2);\r\n      if (s1.length >= 2) {\r\n        s2 = peg$FAILED;\r\n      } else {\r\n        s2 = input.charAt(peg$currPos);\r\n        if (peg$r6.test(s2)) {\r\n          peg$currPos++;\r\n        } else {\r\n          s2 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$e20); }\r\n        }\r\n      }\r\n    }\r\n    if (s1.length < 1) {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    } else {\r\n      s0 = s1;\r\n    }\r\n    peg$silentFails--;\r\n    if (s0 === peg$FAILED) {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e19); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsenag() {\r\n    var s0, s1, s2, s3, s4, s5;\r\n\r\n    peg$silentFails++;\r\n    s0 = peg$currPos;\r\n    s1 = peg$parse_();\r\n    if (input.charCodeAt(peg$currPos) === 36) {\r\n      s2 = peg$c8;\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e22); }\r\n    }\r\n    if (s2 !== peg$FAILED) {\r\n      s3 = peg$currPos;\r\n      s4 = [];\r\n      s5 = input.charAt(peg$currPos);\r\n      if (peg$r2.test(s5)) {\r\n        peg$currPos++;\r\n      } else {\r\n        s5 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$e9); }\r\n      }\r\n      if (s5 !== peg$FAILED) {\r\n        while (s5 !== peg$FAILED) {\r\n          s4.push(s5);\r\n          s5 = input.charAt(peg$currPos);\r\n          if (peg$r2.test(s5)) {\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$e9); }\r\n          }\r\n        }\r\n      } else {\r\n        s4 = peg$FAILED;\r\n      }\r\n      if (s4 !== peg$FAILED) {\r\n        s3 = input.substring(s3, peg$currPos);\r\n      } else {\r\n        s3 = s4;\r\n      }\r\n      if (s3 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s0 = peg$f6(s3);\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    peg$silentFails--;\r\n    if (s0 === peg$FAILED) {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e21); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsecomment() {\r\n    var s0;\r\n\r\n    s0 = peg$parsebraceComment();\r\n    if (s0 === peg$FAILED) {\r\n      s0 = peg$parserestOfLineComment();\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsebraceComment() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    peg$silentFails++;\r\n    s0 = peg$currPos;\r\n    if (input.charCodeAt(peg$currPos) === 123) {\r\n      s1 = peg$c9;\r\n      peg$currPos++;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e24); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      s3 = [];\r\n      s4 = input.charAt(peg$currPos);\r\n      if (peg$r7.test(s4)) {\r\n        peg$currPos++;\r\n      } else {\r\n        s4 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$e25); }\r\n      }\r\n      while (s4 !== peg$FAILED) {\r\n        s3.push(s4);\r\n        s4 = input.charAt(peg$currPos);\r\n        if (peg$r7.test(s4)) {\r\n          peg$currPos++;\r\n        } else {\r\n          s4 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$e25); }\r\n        }\r\n      }\r\n      s2 = input.substring(s2, peg$currPos);\r\n      if (input.charCodeAt(peg$currPos) === 125) {\r\n        s3 = peg$c10;\r\n        peg$currPos++;\r\n      } else {\r\n        s3 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$e26); }\r\n      }\r\n      if (s3 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s0 = peg$f7(s2);\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    peg$silentFails--;\r\n    if (s0 === peg$FAILED) {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e23); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parserestOfLineComment() {\r\n    var s0, s1, s2, s3, s4;\r\n\r\n    peg$silentFails++;\r\n    s0 = peg$currPos;\r\n    if (input.charCodeAt(peg$currPos) === 59) {\r\n      s1 = peg$c11;\r\n      peg$currPos++;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e28); }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$currPos;\r\n      s3 = [];\r\n      s4 = input.charAt(peg$currPos);\r\n      if (peg$r8.test(s4)) {\r\n        peg$currPos++;\r\n      } else {\r\n        s4 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$e29); }\r\n      }\r\n      while (s4 !== peg$FAILED) {\r\n        s3.push(s4);\r\n        s4 = input.charAt(peg$currPos);\r\n        if (peg$r8.test(s4)) {\r\n          peg$currPos++;\r\n        } else {\r\n          s4 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$e29); }\r\n        }\r\n      }\r\n      s2 = input.substring(s2, peg$currPos);\r\n      peg$savedPos = s0;\r\n      s0 = peg$f8(s2);\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    peg$silentFails--;\r\n    if (s0 === peg$FAILED) {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e27); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsevariation() {\r\n    var s0, s1, s2, s3, s4, s5;\r\n\r\n    peg$silentFails++;\r\n    s0 = peg$currPos;\r\n    s1 = peg$parse_();\r\n    if (input.charCodeAt(peg$currPos) === 40) {\r\n      s2 = peg$c12;\r\n      peg$currPos++;\r\n    } else {\r\n      s2 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e31); }\r\n    }\r\n    if (s2 !== peg$FAILED) {\r\n      s3 = peg$parseline();\r\n      if (s3 !== peg$FAILED) {\r\n        s4 = peg$parse_();\r\n        if (input.charCodeAt(peg$currPos) === 41) {\r\n          s5 = peg$c13;\r\n          peg$currPos++;\r\n        } else {\r\n          s5 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$e32); }\r\n        }\r\n        if (s5 !== peg$FAILED) {\r\n          peg$savedPos = s0;\r\n          s0 = peg$f9(s3);\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    peg$silentFails--;\r\n    if (s0 === peg$FAILED) {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e30); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parsegameTerminationMarker() {\r\n    var s0, s1, s2, s3;\r\n\r\n    peg$silentFails++;\r\n    s0 = peg$currPos;\r\n    if (input.substr(peg$currPos, 3) === peg$c14) {\r\n      s1 = peg$c14;\r\n      peg$currPos += 3;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e34); }\r\n    }\r\n    if (s1 === peg$FAILED) {\r\n      if (input.substr(peg$currPos, 3) === peg$c15) {\r\n        s1 = peg$c15;\r\n        peg$currPos += 3;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$e35); }\r\n      }\r\n      if (s1 === peg$FAILED) {\r\n        if (input.substr(peg$currPos, 7) === peg$c16) {\r\n          s1 = peg$c16;\r\n          peg$currPos += 7;\r\n        } else {\r\n          s1 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$e36); }\r\n        }\r\n        if (s1 === peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 42) {\r\n            s1 = peg$c17;\r\n            peg$currPos++;\r\n          } else {\r\n            s1 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$e37); }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (s1 !== peg$FAILED) {\r\n      s2 = peg$parse_();\r\n      s3 = peg$parsecomment();\r\n      if (s3 === peg$FAILED) {\r\n        s3 = null;\r\n      }\r\n      peg$savedPos = s0;\r\n      s0 = peg$f10(s1, s3);\r\n    } else {\r\n      peg$currPos = s0;\r\n      s0 = peg$FAILED;\r\n    }\r\n    peg$silentFails--;\r\n    if (s0 === peg$FAILED) {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e33); }\r\n    }\r\n\r\n    return s0;\r\n  }\r\n\r\n  function peg$parse_() {\r\n    var s0, s1;\r\n\r\n    peg$silentFails++;\r\n    s0 = [];\r\n    s1 = input.charAt(peg$currPos);\r\n    if (peg$r9.test(s1)) {\r\n      peg$currPos++;\r\n    } else {\r\n      s1 = peg$FAILED;\r\n      if (peg$silentFails === 0) { peg$fail(peg$e39); }\r\n    }\r\n    while (s1 !== peg$FAILED) {\r\n      s0.push(s1);\r\n      s1 = input.charAt(peg$currPos);\r\n      if (peg$r9.test(s1)) {\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$e39); }\r\n      }\r\n    }\r\n    peg$silentFails--;\r\n    s1 = peg$FAILED;\r\n    if (peg$silentFails === 0) { peg$fail(peg$e38); }\r\n\r\n    return s0;\r\n  }\r\n\r\n  peg$result = peg$startRuleFunction();\r\n\r\n  if (options.peg$library) {\r\n    return /** @type {any} */ ({\r\n      peg$result,\r\n      peg$currPos,\r\n      peg$FAILED,\r\n      peg$maxFailExpected,\r\n      peg$maxFailPos\r\n    });\r\n  }\r\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\r\n    return peg$result;\r\n  } else {\r\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\r\n      peg$fail(peg$endExpectation());\r\n    }\r\n\r\n    throw peg$buildStructuredError(\r\n      peg$maxFailExpected,\r\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\r\n      peg$maxFailPos < input.length\r\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\r\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\r\n    );\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  StartRules: [\"pgn\"],\r\n  SyntaxError: peg$SyntaxError,\r\n  parse: peg$parse\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chess.js/dist/cjs/pgn.js\n");

/***/ })

};
;